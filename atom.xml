<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chivalry Blog</title>
  <icon>https://www.gravatar.com/avatar/df9cdf022c28fc26c17e6606f8050569</icon>
  <subtitle>从前很懒，从今以后约束自己</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chivalry727.github.io/"/>
  <updated>2020-08-23T13:54:40.650Z</updated>
  <id>https://chivalry727.github.io/</id>
  
  <author>
    <name>Mr.zxb</name>
    <email>zhongxuebinwin8@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM 参数配置</title>
    <link href="https://chivalry727.github.io/JVM%20%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/"/>
    <id>https://chivalry727.github.io/JVM%20%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</id>
    <published>2020-08-23T04:47:39.000Z</published>
    <updated>2020-08-23T13:54:40.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM-参数配置"><a href="#JVM-参数配置" class="headerlink" title="JVM 参数配置"></a>JVM 参数配置</h2><h3 id="虚拟机及垃圾收集器日志"><a href="#虚拟机及垃圾收集器日志" class="headerlink" title="虚拟机及垃圾收集器日志"></a>虚拟机及垃圾收集器日志</h3><p>在JDK9以前，HotSpot并没有提供统一的日志处理框架，虚拟机各个功能模块的日志开关分布在不同的参数上，日志级别、循环日志大小、输出格式、重定向等设置在不同功能上都需要单独解决。直到JDK9，这些问题才终于解决，HotSpot将所有功能的日志都收归到了<code>-Xlog</code>参数上。</p><p>参数格式：<code>-Xlog[:[selector][:[output][:[decorators][:output-options]]]]</code></p><a id="more"></a><p>命令行中最关键的参数是选择器（Selector），它由标签（Tag）和日志级别（Level）共同组成。标签可理解为虚拟机中某个功能模块的名字，它告诉日志框架用户希望得到虚拟机哪些功能的日志输出。垃圾收集器的标签名称为”gc”，由此可见，垃圾收集器日志只是HotSpot众多功能日志的其中一项。</p><p>日志级别从低到高，共有Trace、Debug、Info、Warning、Error、Off六种级别，日志级别决定了输出信息的详细程度，默认级别为Info，HotSpot的日志规则与Log4j、Slf4j这类Java日志框架大体上是一致的。</p><p>JDK9前后日志参数变化列表。</p><table><thead><tr><th align="left">JDK9前日志参数</th><th align="left">JDK9后配置形式</th></tr></thead><tbody><tr><td align="left">-XX:+PrintGC</td><td align="left">-Xlog:gc</td></tr><tr><td align="left">-XX:+PrintGCDetails</td><td align="left">-Xlog:gc+heap=debug</td></tr><tr><td align="left">-XX:+G1PrintHeapRegions</td><td align="left">-Xlog:gc+region=trace</td></tr><tr><td align="left">-XX:+G1PrintRegionLivenessInfo</td><td align="left">-Xlog:gc+liveness=trace</td></tr><tr><td align="left">-XX:+G1SummarizeConcMark</td><td align="left">-Xlog:gc+marking=trace</td></tr><tr><td align="left">-XX:+G1SummarizeRSetStats</td><td align="left">-Xlog:gc+remset*=trace</td></tr><tr><td align="left">-XX:+GCLogFileSize, NumberOfGCLogFiles, UseGCLogFileRotation</td><td align="left">-Xlog:gc*:file=<file>::filecount=<count>,filesize=<filesize in kb></td></tr><tr><td align="left">-XX:+PrintAdaptiveSizePolicy</td><td align="left">-Xlog:gc+ergo*=trace</td></tr><tr><td align="left">-XX:+PrintClassHistogramAfterFullGC</td><td align="left">-Xlog:classhisto*=trace</td></tr><tr><td align="left">-XX:+PrintClassHistogramBeforeFullGC</td><td align="left">-Xlog:classhisto*=trace</td></tr><tr><td align="left">-XX:+PrintGCApplicationConcurrentTime</td><td align="left">-Xlog:safepoint</td></tr><tr><td align="left">-XX:+PrintGCApplicationStoppedTime</td><td align="left">-Xlog:safepoint</td></tr><tr><td align="left">-XX:+PrintGCDateStamps</td><td align="left">使用time修饰器</td></tr><tr><td align="left">-XX:+PrintGCTaskTimeStamps</td><td align="left">-Xlog:gc+task=trace</td></tr><tr><td align="left">-XX:+PrintGcTimeStamps</td><td align="left">使用uptime修饰器</td></tr><tr><td align="left">-XX:+PrintHeapAtGC</td><td align="left">-Xlog:gc+heap=debug</td></tr><tr><td align="left">-XX:+PrintHeapAtGCExtended</td><td align="left">-Xlog:gc+heap=trace</td></tr><tr><td align="left">-XX:+PrintJNIGCStalls</td><td align="left">-Xlog:gc+jni=debug</td></tr><tr><td align="left">-XX:+PrintOldPLAB</td><td align="left">-Xlog:gc+plab=trace</td></tr><tr><td align="left">-XX:+PrintParallelOldGCPhaseTimes</td><td align="left">-Xlog:gc+phases=trace</td></tr><tr><td align="left">-XX:+PrintPLAB</td><td align="left">-Xlog:gc+plab=trace</td></tr><tr><td align="left">-XX:+PrintPromotionFailure</td><td align="left">-Xlog:gc+promotion=debug</td></tr><tr><td align="left">-XX:+PrintReferenceGC</td><td align="left">-Xlog:gc+ref=debug</td></tr><tr><td align="left">-XX:+PrintStringDebuplicationStatisitcs</td><td align="left">-Xlog:gc+stringdedup</td></tr><tr><td align="left">-XX:+PrintTaskqueue</td><td align="left">-Xlog:gc+task+stats=trace</td></tr><tr><td align="left">-XX:+PrintTenuringDistribution</td><td align="left">-Xlog:gc+age=trace</td></tr><tr><td align="left">-XX:+PrintTerminationStats</td><td align="left">-Xlog:gc+task+stats=debug</td></tr><tr><td align="left">-XX:+PrintTLAB</td><td align="left">-Xlog:gc+tlab=trace</td></tr><tr><td align="left">-XX:+TraceAdaptiveGCBoundary</td><td align="left">-Xlog:heap+ergo=debug</td></tr><tr><td align="left">-XX:+TraceDynamicGCThreads</td><td align="left">-Xlog:gc+task=trace</td></tr><tr><td align="left">-XX:+TraceMetadataHumongousAllocation</td><td align="left">-Xlog:gc+metaspace+alloc=debug</td></tr><tr><td align="left">-XX:+G1TraceConcRefinement</td><td align="left">-Xlog:gc+refine=debug</td></tr><tr><td align="left">-XX:+G1TraceEagerReclaimHumongousObjectss</td><td align="left">-Xlog:gc+humongous=debug</td></tr><tr><td align="left">-XX:+G1TraceStringSymbolTableScrubbing</td><td align="left">-Xlog:gc+stringtable=trace</td></tr></tbody></table><h3 id="垃圾收集器参数"><a href="#垃圾收集器参数" class="headerlink" title="垃圾收集器参数"></a>垃圾收集器参数</h3><p>垃圾收集齐全相关的常用参数</p><table><thead><tr><th align="center">参数</th><th>描述</th></tr></thead><tbody><tr><td align="center">-XX:+/-UseSerialGC</td><td>虚拟机运行在Client模式下的默认值，打开此开关后，使用Serial + Serial Old的收集器组合进行内存回收</td></tr><tr><td align="center">-XX:+/-UseParNewGC</td><td>打开此开关后，使用ParNew + Serial Old的收集器组合进行内存回收，在JDK9后不再支持</td></tr><tr><td align="center">-XX:+/-UseConcMarkSweepGC</td><td>打开此开关后，使用ParNew + CMS + Serial Old的收集器组合进行内存回收。Serial Old收集器将作为CMS收集器出现“Concurrent Mode Failure”失败后的后备收集器使用</td></tr><tr><td align="center">-XX:+/-UseParallelGC</td><td>JDK9之前虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge + Serial Old（PS MarkSweep）的收集器组合进行内存回收</td></tr><tr><td align="center">-XX:+/-UseParallelOldGC</td><td>打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行内存回收</td></tr><tr><td align="center">-Xms256m</td><td>初始堆大小</td></tr><tr><td align="center">-Xmx512m</td><td>最大堆大小</td></tr><tr><td align="center">-Xmn128m</td><td>新生代大小</td></tr><tr><td align="center">-Xss1m</td><td>设置栈大小</td></tr><tr><td align="center">-XX:+/-UseTLAB</td><td>开启本地线程分配缓冲（Thread Local Allocation Buffer，TLAB）</td></tr><tr><td align="center">-XX:FieldsAllocationStyle</td><td>字段存储顺序会受到虚拟机分配策略参数</td></tr><tr><td align="center">-XX：HeapDumpOnOutOfMemoryError</td><td>虚拟机内存溢出时导出堆转储快照文件</td></tr><tr><td align="center">-XX:MaxPermSize</td><td>最大永久代大小（JDK6）</td></tr><tr><td align="center">-XX:PermSize</td><td>初始永久代大小（JDK6）</td></tr><tr><td align="center">-XX:MaxMetaspaceSize</td><td>最大元空间大小（JDK8），默认是-1，即不限制，或者说只受限于本地内存大小</td></tr><tr><td align="center">-XX:MetaspaceSize</td><td>指定元空间的初始大小，以字节为单位，达到该单位就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整：如果释放了大量空间就会降低该值；如果释放很少空间，在不超过最大的元空间大小的前提下，适当提高该值</td></tr><tr><td align="center">-XX:MinMetaspaceFreeRatio</td><td>作用是在垃圾收集之后控制最小的元空间剩余容量的百分比，可减少因为元空间不足导致的垃圾收集的频率。</td></tr><tr><td align="center">-XX:MaxMetaspaceFreeRatio</td><td>用于控制最大的元空间剩余容量的百分比</td></tr><tr><td align="center">-XX:MaxDirectMemorySize</td><td>设置直接内存的最大容量，若不指定，则默认与堆最大值一致</td></tr><tr><td align="center">-XX:SurvivorRatio</td><td>新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden：Survivor=8:1</td></tr><tr><td align="center">-XX:PretenureSizeThreshold</td><td>直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配</td></tr><tr><td align="center">-XX:MaxTenuringThreshold</td><td>晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就增加1，当超过这个参数值时就进入老年代</td></tr><tr><td align="center">-XX:UseAdaptiveSizePolicy</td><td>动态调整Java堆中各个区域的大小以及进入老年代的年龄</td></tr><tr><td align="center">-XX:HandlePromotionFailure</td><td>是否允许分配担保失败，即老年代的剩余空间不足以应对新生代的整个Eden和Survivor区的所有对象都存活的极端情况</td></tr><tr><td align="center">-XX:ParallelGCThreads</td><td>设置并行GC时进行内存回收的线程数，也就是用户线程冻结期间并行执行的收集器线程数</td></tr><tr><td align="center">-XX:GCTimeRatio</td><td>GC时间占总时间的比率，默认值为99，即允许1%的GC时间。仅在使用Parallel Scavenge收集器时生效</td></tr><tr><td align="center">-XX:MaxGCPauseMillis</td><td>设置GC的最大停顿时间。仅在使用Parallel Scavenge收集器时生效</td></tr><tr><td align="center">-XX:CMSInitiatingOccupancyFraction</td><td>设置CMS收集器在老年代空间被使用多少后触发垃圾收集。默认值为68%，仅在使用CMS收集器时生效</td></tr><tr><td align="center">-XX:UseCMSCompactAtFullCollection</td><td>设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片整理。仅在使用CMS收集器时生效，此参数从JDK9开始废弃</td></tr><tr><td align="center">-XX:CMSFullGCsBeforeCompaction</td><td>设置CMS收集器在进行若干次垃圾收集后再启动一次内存碎片整理。仅在使用CMS收集器时生效，此参数从JDK9开始废弃</td></tr><tr><td align="center">-XX:UseG1GC</td><td>使用G1收集器，这个是JDK9后的Server模式默认值</td></tr><tr><td align="center">-XX:G1HeapRegionSize=n</td><td>设置Region大小，并非最终值</td></tr><tr><td align="center">-XX:MaxGCPauseMillis</td><td>设置G1收集过程目标时间，默认值200ms，不是硬性条件</td></tr><tr><td align="center">-XX:G1NewSizePercent</td><td>新生代最小值，默认值是5%</td></tr><tr><td align="center">-XX:G1MaxNewSizePercent</td><td>新生代最大值，默认值是60%</td></tr><tr><td align="center">-XX:ConcGCThreads=n</td><td>并发标记、并发整理的执行线程数，对不同的收集器，根据其能够并发的阶段，有不同的含义</td></tr><tr><td align="center">-XX:InitiatingHeapOccupancyPercent</td><td>设置触发标记周期的Java堆占用率阈值。默认值是45%。这里的Java堆占比值的是non_young_capacity_bytes，包括old+humongous</td></tr><tr><td align="center">-XX:UseShenandoahGC</td><td>使用Shenandoah收集器。这个选项在OracleJDK中不被支持，只能在OpenJDK 12或者某些支持Shenandoah的Backport发行版本使用。目前仍然要配合-XX:+UnlockExperimentalVMOptions使用</td></tr><tr><td align="center">-XX:ShenandoahGCHeuristics</td><td>Shenandoah何时启动一次GC过程，其可选值有adaptive、static、compact、passive、aggressive</td></tr><tr><td align="center">-XX:UseZGC</td><td>使用ZGC收集器，目前仍然要配合-XX:+UnlockExperimentalVMOptions使用</td></tr><tr><td align="center">-XX:UseNUMA</td><td>启用NUMA内存分配支持，目前只有Parallel和ZGC支持，以后G1收集器可能也会支持该选项</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>垃圾收集器在许多场景中都是影响系统停顿时间和吞吐能力的重要因素之一，虚拟机之所以提供多种不同的收集器以及大量的调节参数，就是因为只有根据实际应用需求、实现方式选择最优的收集方式才能获取最好的性能。没有固定收集器、参数组合，没有最优的调优方法，虚拟机也就没有什么必然的内存回收行为。如果要实践调优，就必须要了解每个具体收集器的行为、优势劣势、调节参数等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JVM-参数配置&quot;&gt;&lt;a href=&quot;#JVM-参数配置&quot; class=&quot;headerlink&quot; title=&quot;JVM 参数配置&quot;&gt;&lt;/a&gt;JVM 参数配置&lt;/h2&gt;&lt;h3 id=&quot;虚拟机及垃圾收集器日志&quot;&gt;&lt;a href=&quot;#虚拟机及垃圾收集器日志&quot; class=&quot;headerlink&quot; title=&quot;虚拟机及垃圾收集器日志&quot;&gt;&lt;/a&gt;虚拟机及垃圾收集器日志&lt;/h3&gt;&lt;p&gt;在JDK9以前，HotSpot并没有提供统一的日志处理框架，虚拟机各个功能模块的日志开关分布在不同的参数上，日志级别、循环日志大小、输出格式、重定向等设置在不同功能上都需要单独解决。直到JDK9，这些问题才终于解决，HotSpot将所有功能的日志都收归到了&lt;code&gt;-Xlog&lt;/code&gt;参数上。&lt;/p&gt;
&lt;p&gt;参数格式：&lt;code&gt;-Xlog[:[selector][:[output][:[decorators][:output-options]]]]&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM 笔记" scheme="https://chivalry727.github.io/categories/JVM-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JVM 参数" scheme="https://chivalry727.github.io/tags/JVM-%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之适配器模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-21T13:55:05.000Z</published>
    <updated>2020-08-21T14:51:44.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之适配器模式"><a href="#每天一个设计模式之适配器模式" class="headerlink" title="每天一个设计模式之适配器模式"></a>每天一个设计模式之适配器模式</h2><h3 id="我们周围的适配器"><a href="#我们周围的适配器" class="headerlink" title="我们周围的适配器"></a>我们周围的适配器</h3><p>OO适配器是什么，你一定不难理解，因为现实中到处都是。比方说：如果你需要在欧洲国家使用美国制造的笔记本电脑，你可能需要使用一个交流电的适配器…</p><p>你知道适配器的作用：它位于美式插头和欧式插头中间，它的工作是将欧式插座转换成美式插座，好让美式插头可以插进这个插座得到电力。或者也可以这么认为：适配器改变了插座的接口，以符合美式笔记本电脑的需求。</p><p>其实OO适配器和真实世界的适配器扮演着同样的角色：将一个接口转换成另一个接口，以符合客户的期望。</p><a id="more"></a><h3 id="面向对象适配器"><a href="#面向对象适配器" class="headerlink" title="面向对象适配器"></a>面向对象适配器</h3><p>假设已有一个软件系统，你希望它和一个新的产商类库搭配使用，但是这个新产商所设计出来的接口，不同于旧产商的接口；我们又不想改变现有的代码，解决这个问题。所以我们可以提供一个适配器的类，将新产商接口转换成你所期望的接口。</p><p>这个适配器工作起来就如同一个中间人，它将客户所发出的请求转换成产商类能理解的请求。</p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:05:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:05:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Quack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火鸡接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:06:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 野火鸡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:06:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WildTurkey</span> <span class="keyword">implements</span> <span class="title">Turkey</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">gobble</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Gobble gobble.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying a short distance.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设你缺一些鸭子对象， 想用一些火鸡对象来冒充。显而易见，不能直接使用火鸡接口。所以写一个适配器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火鸡适配器，将火鸡伪装成鸭子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:07:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurkeyAdapter</span> <span class="keyword">implements</span> <span class="title">Duck</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Turkey turkey;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TurkeyAdapter</span><span class="params">(Turkey turkey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.turkey = turkey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        turkey.gobble();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 火鸡飞行距离很短，不像鸭子飞行距离远，所以让火鸡多飞几次来完成</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            turkey.fly();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DuckTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一只鸭子</span></span><br><span class="line">        MallardDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">       <span class="comment">// 创建一只火鸡 </span></span><br><span class="line">        WildTurkey turkey = <span class="keyword">new</span> WildTurkey();</span><br><span class="line">        <span class="comment">// 然后将火鸡包装进一个火鸡适配器中，使它看起来像只鸭子</span></span><br><span class="line">        Duck turkeyAdapter = <span class="keyword">new</span> TurkeyAdapter(turkey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试火鸡</span></span><br><span class="line">        System.out.println(<span class="string">&quot;The Turkey says...&quot;</span>);</span><br><span class="line">        turkey.gobble();</span><br><span class="line">        turkey.fly();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试鸭子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;The Duck says...&quot;</span>);</span><br><span class="line">        testDuck(duck);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 测试适配器包装的假鸭子</span></span><br><span class="line">        System.out.println(<span class="string">&quot;The TurkeyAdapter says...&quot;</span>);</span><br><span class="line">        testDuck(turkeyAdapter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuck</span><span class="params">(Duck duck)</span> </span>&#123;</span><br><span class="line">        duck.quack();</span><br><span class="line">        duck.fly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">The Turkey says...</span><br><span class="line">Gobble gobble.</span><br><span class="line">I<span class="string">&#x27;m flying a short distance.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The Duck says...</span></span><br><span class="line"><span class="string">Quack</span></span><br><span class="line"><span class="string">I&#x27;</span>m flying.</span><br><span class="line"></span><br><span class="line">The TurkeyAdapter says...</span><br><span class="line">Gobble gobble.</span><br><span class="line">I<span class="string">&#x27;m flying a short distance.</span></span><br><span class="line"><span class="string">I&#x27;</span>m flying a <span class="keyword">short</span> distance.</span><br><span class="line">I<span class="string">&#x27;m flying a short distance.</span></span><br><span class="line"><span class="string">I&#x27;</span>m flying a <span class="keyword">short</span> distance.</span><br><span class="line">I<span class="string">&#x27;m flying a short distance.</span></span><br></pre></td></tr></table></figure><h3 id="适配器模式解析"><a href="#适配器模式解析" class="headerlink" title="适配器模式解析"></a>适配器模式解析</h3><p>现在我们知道了什么是适配器，让我们看看各部分之间的关系。</p><p><img src="http://wx4.sinaimg.cn/large/008aQ1h9ly1ghysshz6dmj30tk0hido6.jpg"></p><p>客户使用适配器的过程如下：</p><ol><li><strong>客户通过目标接口调用适配器的方法对适配器发出请求</strong>。</li><li><strong>适配器使用被适配器接口把请求转换成被适配器的一个或多个调用接口</strong>。</li><li><strong>客户接收调用的结果，但并未察觉这一切是适配器在起转换作用</strong>。</li></ol><h3 id="定义适配器模式"><a href="#定义适配器模式" class="headerlink" title="定义适配器模式"></a>定义适配器模式</h3><blockquote><p>适配器模式将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p></blockquote><h3 id="适配器类图"><a href="#适配器类图" class="headerlink" title="适配器类图"></a>适配器类图</h3><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghyswd63azj30xl0enjwz.jpg"></p><h3 id="设计JDK类库中的适配器"><a href="#设计JDK类库中的适配器" class="headerlink" title="设计JDK类库中的适配器"></a>设计JDK类库中的适配器</h3><p>在Java早期集合类型（Vector、Stack、Hashtable）都实现了一个名为<code>elements()</code>的方法。这个<code>Enumeration</code>接口可以逐一走过此集合内的每个元素，而无需知道它们在集合内是如何被管理的。</p><p>在JDK后来的更新中，开始使用了<code>Iterator</code>迭代器接口，这个接口和枚举接口很像，都可以让你遍历此集合类型内的每个元素，但不同的是，迭代器提供了删除元素的功能。</p><h3 id="将枚举Enumeration适配到迭代器中"><a href="#将枚举Enumeration适配到迭代器中" class="headerlink" title="将枚举Enumeration适配到迭代器中"></a>将枚举Enumeration适配到迭代器中</h3><p>看看两个接口的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Enumeration</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Tests if this enumeration contains more elements.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &lt;code&gt;true&lt;/code&gt; if and only if this enumeration object</span></span><br><span class="line"><span class="comment">     *           contains at least one more element to provide;</span></span><br><span class="line"><span class="comment">     *          &lt;code&gt;false&lt;/code&gt; otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the next element of this enumeration if this enumeration</span></span><br><span class="line"><span class="comment">     * object has at least one more element to provide.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>     the next element of this enumeration.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span>  NoSuchElementException  if no more elements exist.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements.</span></span><br><span class="line"><span class="comment">     * (In other words, returns &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #next&#125; would</span></span><br><span class="line"><span class="comment">     * return an element rather than throwing an exception.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the iteration has more elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the next element in the iteration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchElementException if the iteration has no more elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Removes from the underlying collection the last element returned</span></span><br><span class="line"><span class="comment">     * by this iterator (optional operation).  This method can be called</span></span><br><span class="line"><span class="comment">     * only once per call to &#123;<span class="doctag">@link</span> #next&#125;.  The behavior of an iterator</span></span><br><span class="line"><span class="comment">     * is unspecified if the underlying collection is modified while the</span></span><br><span class="line"><span class="comment">     * iteration is in progress in any way other than by calling this</span></span><br><span class="line"><span class="comment">     * method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * The default implementation throws an instance of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> UnsupportedOperationException&#125; and performs no other action.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedOperationException if the &#123;<span class="doctag">@code</span> remove&#125;</span></span><br><span class="line"><span class="comment">     *         operation is not supported by this iterator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalStateException if the &#123;<span class="doctag">@code</span> next&#125; method has not</span></span><br><span class="line"><span class="comment">     *         yet been called, or the &#123;<span class="doctag">@code</span> remove&#125; method has already</span></span><br><span class="line"><span class="comment">     *         been called after the last call to the &#123;<span class="doctag">@code</span> next&#125;</span></span><br><span class="line"><span class="comment">     *         method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;remove&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Performs the given action for each remaining element until all elements</span></span><br><span class="line"><span class="comment">     * have been processed or the action throws an exception.  Actions are</span></span><br><span class="line"><span class="comment">     * performed in the order of iteration, if that order is specified.</span></span><br><span class="line"><span class="comment">     * Exceptions thrown by the action are relayed to the caller.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The default implementation behaves as if:</span></span><br><span class="line"><span class="comment">     * &lt;pre&gt;&#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     *     while (hasNext())</span></span><br><span class="line"><span class="comment">     *         action.accept(next());</span></span><br><span class="line"><span class="comment">     * &#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> action The action to be performed for each element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if the specified action is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(action);</span><br><span class="line">        <span class="keyword">while</span> (hasNext())</span><br><span class="line">            action.accept(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设计适配器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举迭代器适配器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-21 22:43:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnumerationIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Enumeration&lt;T&gt; enumeration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EnumerationIterator</span><span class="params">(Enumeration&lt;T&gt; enumeration)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enumeration = enumeration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.hasMoreElements();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> enumeration.nextElement();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>当需要使用一个现有的类而其接口并不符合你的需要时，就使用适配器。</li><li>适配器改变接口以符合客户的期望。</li><li>实现一个适配器可能需要一番功夫，也可能不费功夫，视目标接口的大小与复杂度而定。</li><li>适配器模式有两种形式：对象适配器和类适配器。类适配器需要用到多重继承。</li><li>适配器将一个对象包装起来以改变其接口；装饰者将一个对象包装起来以增加新的行为和责任。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之适配器模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之适配器模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之适配器模式&quot;&gt;&lt;/a&gt;每天一个设计模式之适配器模式&lt;/h2&gt;&lt;h3 id=&quot;我们周围的适配器&quot;&gt;&lt;a href=&quot;#我们周围的适配器&quot; class=&quot;headerlink&quot; title=&quot;我们周围的适配器&quot;&gt;&lt;/a&gt;我们周围的适配器&lt;/h3&gt;&lt;p&gt;OO适配器是什么，你一定不难理解，因为现实中到处都是。比方说：如果你需要在欧洲国家使用美国制造的笔记本电脑，你可能需要使用一个交流电的适配器…&lt;/p&gt;
&lt;p&gt;你知道适配器的作用：它位于美式插头和欧式插头中间，它的工作是将欧式插座转换成美式插座，好让美式插头可以插进这个插座得到电力。或者也可以这么认为：适配器改变了插座的接口，以符合美式笔记本电脑的需求。&lt;/p&gt;
&lt;p&gt;其实OO适配器和真实世界的适配器扮演着同样的角色：将一个接口转换成另一个接口，以符合客户的期望。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="适配器模式" scheme="https://chivalry727.github.io/tags/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>面试总结-2</title>
    <link href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2/"/>
    <id>https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93-2/</id>
    <published>2020-08-21T09:50:39.000Z</published>
    <updated>2020-08-22T12:50:49.026Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-IO-NIO-AIO-的区别以及线程模型"><a href="#Java-IO-NIO-AIO-的区别以及线程模型" class="headerlink" title="Java IO/NIO/AIO 的区别以及线程模型"></a>Java IO/NIO/AIO 的区别以及线程模型</h3><p>IO：同步阻塞IO</p><p>NIO：同步非阻塞IO</p><p>AIO：异步非阻塞IO</p><a id="more"></a><h3 id="Full-GC-和-Young-GC-区别"><a href="#Full-GC-和-Young-GC-区别" class="headerlink" title="Full GC 和 Young GC 区别"></a>Full GC 和 Young GC 区别</h3><p>Minor GC又称为Young GC，只回收新生代的收集器，MinorGC很频繁，和用户线程同步执行，不会停顿用户线程</p><p>Full GC又称为Major GC，<strong>就是收集整个堆，包括新生代，老年代，永久代(在JDK 1.8及以后，永久代会被移除，换为metaspace)等收集区域</strong></p><h3 id="YoungGC-是否会Stop-the-World，YGC停顿时间是否可配置"><a href="#YoungGC-是否会Stop-the-World，YGC停顿时间是否可配置" class="headerlink" title="YoungGC 是否会Stop the World，YGC停顿时间是否可配置"></a>YoungGC 是否会Stop the World，YGC停顿时间是否可配置</h3><p>是的，也会stw，ygc不能配置停顿时间</p><h3 id="Spring-启动流程"><a href="#Spring-启动流程" class="headerlink" title="Spring 启动流程"></a>Spring 启动流程</h3><p>Spring 上下文的启动流程，也就是启动 AbstractApplicationContext refresh()的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">            <span class="comment">// 准备此上下文以进行刷新。</span></span><br><span class="line">            prepareRefresh();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 告诉子类刷新内部bean工厂</span></span><br><span class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 准备在这种情况下使用的bean工厂</span></span><br><span class="line">            prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 允许在上下文子类中对bean工厂进行后处理。</span></span><br><span class="line">                postProcessBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 调用在上下文中注册为bean的工厂处理器。</span></span><br><span class="line">                invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 注册拦截Bean创建的Bean处理器。</span></span><br><span class="line">                registerBeanPostProcessors(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 为此上下文初始化消息源。</span></span><br><span class="line">                initMessageSource();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 为此上下文初始化事件多播器。</span></span><br><span class="line">                initApplicationEventMulticaster();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在特定上下文子类中初始化其他特殊bean。</span></span><br><span class="line">                onRefresh();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 检查侦听器bean并注册它们。</span></span><br><span class="line">                registerListeners();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 实例化所有剩余的（非延迟初始化）单例bean。</span></span><br><span class="line">                finishBeanFactoryInitialization(beanFactory);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 最后一步：发布相应的事件。</span></span><br><span class="line">                finishRefresh();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                    logger.warn(<span class="string">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class="line">                            <span class="string">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 销毁已创建的单例以避免资源悬空。</span></span><br><span class="line">                destroyBeans();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 重置“活动”标志。</span></span><br><span class="line">                cancelRefresh(ex);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 将异常传播给监听者。</span></span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 在Spring的核心中重置常见的自省缓存，因为我们可能再也不需要单例bean的元数据了。</span></span><br><span class="line">                resetCommonCaches();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-Bean-的生命周期"><a href="#Spring-Bean-的生命周期" class="headerlink" title="Spring Bean 的生命周期"></a>Spring Bean 的生命周期</h3><h3 id="SpringMvc-和-SpringBoot-比较"><a href="#SpringMvc-和-SpringBoot-比较" class="headerlink" title="SpringMvc 和 SpringBoot 比较"></a>SpringMvc 和 SpringBoot 比较</h3><h3 id="SpringBoot-优点"><a href="#SpringBoot-优点" class="headerlink" title="SpringBoot 优点"></a>SpringBoot 优点</h3><h3 id="SpringCloud-组件用过哪些"><a href="#SpringCloud-组件用过哪些" class="headerlink" title="SpringCloud 组件用过哪些"></a>SpringCloud 组件用过哪些</h3><h3 id="SpringCloud-和-Dubbo-区别"><a href="#SpringCloud-和-Dubbo-区别" class="headerlink" title="SpringCloud 和 Dubbo 区别"></a>SpringCloud 和 Dubbo 区别</h3><h3 id="Mybatis-一级缓存、二级缓存介绍一下"><a href="#Mybatis-一级缓存、二级缓存介绍一下" class="headerlink" title="Mybatis 一级缓存、二级缓存介绍一下"></a>Mybatis 一级缓存、二级缓存介绍一下</h3><h3 id="rpc-发送的数据格式是什么样"><a href="#rpc-发送的数据格式是什么样" class="headerlink" title="rpc 发送的数据格式是什么样"></a>rpc 发送的数据格式是什么样</h3><h3 id="gRPC-和-Dubbo-区别"><a href="#gRPC-和-Dubbo-区别" class="headerlink" title="gRPC 和 Dubbo 区别"></a>gRPC 和 Dubbo 区别</h3><h3 id="gRPC-优缺点"><a href="#gRPC-优缺点" class="headerlink" title="gRPC 优缺点"></a>gRPC 优缺点</h3><h3 id="Tcp-拆包粘包怎么处理"><a href="#Tcp-拆包粘包怎么处理" class="headerlink" title="Tcp 拆包粘包怎么处理"></a>Tcp 拆包粘包怎么处理</h3><h3 id="MQTT-和-Http-区别"><a href="#MQTT-和-Http-区别" class="headerlink" title="MQTT 和 Http 区别"></a>MQTT 和 Http 区别</h3><h3 id="MQTT-的原理"><a href="#MQTT-的原理" class="headerlink" title="MQTT 的原理"></a>MQTT 的原理</h3><h3 id="MQTT-如何保持长连接的"><a href="#MQTT-如何保持长连接的" class="headerlink" title="MQTT 如何保持长连接的"></a>MQTT 如何保持长连接的</h3><p>通过心跳保持的</p><h3 id="TCP-三次握手和四次握手"><a href="#TCP-三次握手和四次握手" class="headerlink" title="TCP 三次握手和四次握手"></a>TCP 三次握手和四次握手</h3><h3 id="Redis-主从、哨兵介绍一下"><a href="#Redis-主从、哨兵介绍一下" class="headerlink" title="Redis 主从、哨兵介绍一下"></a>Redis 主从、哨兵介绍一下</h3><h3 id="Redis-和内存缓存的区别"><a href="#Redis-和内存缓存的区别" class="headerlink" title="Redis 和内存缓存的区别"></a>Redis 和内存缓存的区别</h3><h3 id="消息队列类型"><a href="#消息队列类型" class="headerlink" title="消息队列类型"></a>消息队列类型</h3><h3 id="分布式锁如何实现"><a href="#分布式锁如何实现" class="headerlink" title="分布式锁如何实现"></a>分布式锁如何实现</h3><h3 id="Aws-lambda-介绍一下"><a href="#Aws-lambda-介绍一下" class="headerlink" title="Aws lambda 介绍一下"></a>Aws lambda 介绍一下</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Java-IO-NIO-AIO-的区别以及线程模型&quot;&gt;&lt;a href=&quot;#Java-IO-NIO-AIO-的区别以及线程模型&quot; class=&quot;headerlink&quot; title=&quot;Java IO/NIO/AIO 的区别以及线程模型&quot;&gt;&lt;/a&gt;Java IO/NIO/AIO 的区别以及线程模型&lt;/h3&gt;&lt;p&gt;IO：同步阻塞IO&lt;/p&gt;
&lt;p&gt;NIO：同步非阻塞IO&lt;/p&gt;
&lt;p&gt;AIO：异步非阻塞IO&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试" scheme="https://chivalry727.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JVM 性能监控与故障处理工具</title>
    <link href="https://chivalry727.github.io/JVM%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://chivalry727.github.io/JVM%20%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2020-08-20T08:59:59.000Z</published>
    <updated>2020-08-23T04:27:05.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM-性能监控与故障处理工具"><a href="#JVM-性能监控与故障处理工具" class="headerlink" title="JVM 性能监控与故障处理工具"></a>JVM 性能监控与故障处理工具</h2><h3 id="JDK-命令行工具"><a href="#JDK-命令行工具" class="headerlink" title="JDK 命令行工具"></a>JDK 命令行工具</h3><p>Java开发人员肯定知道JDK的bin目录中有<code>java.exe</code>、<code>javac.exe</code>这两个命令行工具，但还有很多其他工具提供稳定而强大的功能，能在处理应用程序性能问题、定位故障时发挥很大的作用。下面来介绍一下Java提供的那些强大并且很有帮助的工具吧。</p><a id="more"></a><p>jdk命令行的主要工具：</p><table><thead><tr><th align="center">名称</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">jps</td><td align="left">JVM Process Status Tool，显示指定系统内所有的HotSpot虚拟机进程</td></tr><tr><td align="center">jstat</td><td align="left">JVM Statistics Monitoring Tool，用于收集HotSpot虚拟机各方面的运行数据</td></tr><tr><td align="center">jinfo</td><td align="left">Configuration Info for Java，显示虚拟机配置信息</td></tr><tr><td align="center">jmap</td><td align="left">Memory Map for Java，生成虚拟机的内存转储快照（heapdump文件）</td></tr><tr><td align="center">jhat</td><td align="left">JVM Heap Dump Browser，用于分析heapdump文件，它会建立一个HTTP/HTML服务器，让用户可以在浏览器上查看分析结果</td></tr><tr><td align="center">jstack</td><td align="left">Stack Trace for Java，显示虚拟机的线程快照</td></tr></tbody></table><h3 id="jps：-虚拟机进程状况工具"><a href="#jps：-虚拟机进程状况工具" class="headerlink" title="jps： 虚拟机进程状况工具"></a>jps： 虚拟机进程状况工具</h3><p>JDK的很多小工具的名字都参考了Unix命令的命名方式，jps（JVM Process Status Tool）是其中的典型。功能是可以列出正在运行的虚拟机进程，并显示虚拟机执行主类（Main Class，main()函数所在的类）名称以及这些进程的本地虚拟机唯一ID（Local Virtual Machine Identifier，LVMID）。</p><p>命令格式： <code>jps [options] [hostid]</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.<span class="number">8.0</span>_171\bin&gt;jps <span class="literal">-l</span></span><br><span class="line"><span class="number">9968</span> org.jetbrains.jps.cmdline.Launcher</span><br><span class="line"><span class="number">14248</span> sun.tools.jps.Jps</span><br><span class="line"><span class="number">8812</span> org.jetbrains.idea.maven.server.RemoteMavenServer36</span><br></pre></td></tr></table></figure><p>jps工具的主要选项：</p><table><thead><tr><th align="center">选项</th><th>作用</th></tr></thead><tbody><tr><td align="center">-q</td><td>只输出<code>LVMID</code>，省略主类的名称</td></tr><tr><td align="center">-m</td><td>输出虚拟机进程启动时传递给主类<code>main()</code>函数的参数</td></tr><tr><td align="center">-l</td><td>输出主类的全名， 如果执行进程的是jar包，输出jar路径</td></tr><tr><td align="center">-v</td><td>输出虚拟机进程启动时JVM参数</td></tr></tbody></table><h3 id="jstat：-虚拟机统计信息监视工具"><a href="#jstat：-虚拟机统计信息监视工具" class="headerlink" title="jstat： 虚拟机统计信息监视工具"></a>jstat： 虚拟机统计信息监视工具</h3><p>jstat（JVM Statistics Monitoring Tool）是用于监视虚拟机各种运行状态信息的命令行工具。它可以显示本地或者远程虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据，在没有GUI图形界面，只提供了纯文本控制台环境的服务器上， 它将是运行期定位虚拟机性能问题的首选工具。</p><p>命令格式： <code>jstat [option vmid [interval[s|ms] [count]] ]</code></p><p>参数interval和count代表查询间隔和次数，如果省略这两个参数，说明只查询一次。</p><p>假设需要没250ms查询一次进程2764垃圾收集状况，一共查询20次，那么命令应该是：</p><p>jstat -gc 2764 250 20</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_171\bin&gt;jstat -gcutil 8812 1000 20</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br></pre></td></tr></table></figure><p>选项option代表着用户希望查询的虚拟机信息，主要分为3类：类加载、垃圾收集、运行期编译状况。</p><p>jstat工具的主要选项：</p><table><thead><tr><th align="center">选项</th><th>作用</th></tr></thead><tbody><tr><td align="center">-class</td><td>监视类加载、卸载数量、总空间以及类加载所消耗的时间</td></tr><tr><td align="center">-gc</td><td>监视Java堆状况，包括Eden区、两个Survivor区、老年代、元空间等的容量、已用空间、GC时间合计等信息</td></tr><tr><td align="center">-gccapacity</td><td>监视内容与-gc基本相同，但输出主要关注Java堆各个区域使用到的最大、最小空间</td></tr><tr><td align="center">-gcutil</td><td>监视内容与-gc基本相同，但输出主要关注已使用空间占总空间的百分比</td></tr><tr><td align="center">-gccause</td><td>与-gcutil功能一样，但是会额外输出导致上一次GC产生的原因</td></tr><tr><td align="center">-gcnew</td><td>监视新生代GC状况</td></tr><tr><td align="center">-gcnewcapacity</td><td>监视内容与-gcnew基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td align="center">-gcold</td><td>监视老年代GC状况</td></tr><tr><td align="center">-gcoldcapacity</td><td>监视内容与-gcold基本相同，输出主要关注使用到的最大、最小空间</td></tr><tr><td align="center">-gcpermcapacity（jdk8已移除）</td><td>输出永久代使用到的最大、最小空间</td></tr><tr><td align="center">-gcmetacapacity（jdk8新增）</td><td>输出元空间使用到的最大、最小空间</td></tr><tr><td align="center">-compiler</td><td>输出JIT编译器编译过的方法、耗时等信息</td></tr><tr><td align="center">-printcompilation</td><td>输出已经被JIT编译的方法</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_171\bin&gt;jstat -gcutil 8812 250 20</span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br><span class="line">  0.00 100.00  76.74   4.42  92.98  82.74      3    0.027     0    0.000    0.027</span><br></pre></td></tr></table></figure><p>查询结果：</p><p><code>E代表Eden区，使用了76.74%的空间；</code></p><p><code>两个Survivor区（S0、S1）里面一个是空的，另一个使用了100%；</code></p><p><code>O代表老年代，使用了4.42%</code></p><p><code>M代表元空间，使用了92.98%</code></p><p><code>CCS是压缩的类空间利用率（以百分比表示）是82.74%</code></p><p><code>YGC是程序运行一来来共发生Minor GC（YGC，表示Young GC）3次，总耗时YGCT是0.027s</code></p><p><code>FGC发生Full GC是0次，Full GC的FGCT的耗时也是0</code></p><p><code>GCT（表示GC Time）是所有的GC的总耗时是0.027s</code></p><h3 id="jinfo：-Java配置信息工具"><a href="#jinfo：-Java配置信息工具" class="headerlink" title="jinfo： Java配置信息工具"></a>jinfo： Java配置信息工具</h3><p>jinfo（Configuration Info for Java）的作用是实时地查看和调整虚拟机各项参数。使用jps命令的-v参数可以查看虚拟机启动时显式指定的参数列表，但如果想指定未被显式指定的参数的系统默认值，就可以使用<code>jinfo</code>的<code>-flag</code>选项进行查询，<code>jinfo</code>还可以使用<code>-sysprops</code>选项把虚拟机进程的<code>System.getProperties()</code>的内容打印出来。</p><p><code>jinfo的命令格式：</code></p><p><code>jinfo [ option ] pid </code></p><h3 id="jmap：-Java内存映像工具"><a href="#jmap：-Java内存映像工具" class="headerlink" title="jmap： Java内存映像工具"></a>jmap： Java内存映像工具</h3><p>jmap（Memory Map for Java）命令用于生成堆转储快照（一般称为dump或是heapdump文件）。如果不使用jmap命令，要想获取Java堆转储快照，可以使用</p><p><code>-XX:+HeapDumpOnOutOfMemoryError</code>参数，可以让虚拟机在OOM异常出现之后自动生成dump文件，通过<code>-XX:+HeapDumpOnCtrlBreak</code>参数则可以使用<code>[Ctrl] + [Break]</code>键让虚拟机生成dump文件，又或者在Linux系统下通过<code>Kill -3</code>命令发送进程退出信号，让虚拟机生成dump文件。</p><p>jmap的作用并不仅仅是为了获取dump文件，它还可以查询<code>finalize</code>执行队列、Java堆、元空间（Jdk8以后）或永久代（Jdk8以前）的详细信息，如空间使用率、当前用的是哪种收集器等。</p><p><code>jmap的命令格式：</code></p><p><code>jmap [ option ] pid </code></p><p>jmap工具的主要选项：</p><table><thead><tr><th align="center">选项</th><th>作用</th></tr></thead><tbody><tr><td align="center">-dump</td><td>生成Java堆转储快照。格式为：<code>-dump:[live, ]format=b, file=&lt;filename&gt;</code>，其中live子参数说明只dump存活的对象</td></tr><tr><td align="center">-finalizerinfo</td><td>显示在F-Queue中等待Finalizer线程执行finalize方法的对象。只在Linux/Solaris平台有效</td></tr><tr><td align="center">-heap</td><td>显示Java堆详细，如使用哪种垃圾收集器、参数配置、分代状况等。只在Linux/Solaris平台有效</td></tr><tr><td align="center">-histo</td><td>显示堆中对象统计信息，包括类、实例数量、合计容量</td></tr><tr><td align="center">-permstat</td><td>以ClassLoader为统计口径显示永久代或元空间内存状态。只在Linux/Solaris平台有效</td></tr><tr><td align="center">-F</td><td>当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照。只在Linux/Solaris平台有效</td></tr></tbody></table><p>以下是jmap生成dump快照的示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_171\bin&gt;jmap -dump:format=b,file=D:\dump.hprof 8812</span><br><span class="line">Dumping heap to D:\dump.hprof ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure><h3 id="jhat：-虚拟机堆转储快照分析工具"><a href="#jhat：-虚拟机堆转储快照分析工具" class="headerlink" title="jhat： 虚拟机堆转储快照分析工具"></a>jhat： 虚拟机堆转储快照分析工具</h3><p>Sun JDK提供jhat（JVM Heap Analysis Tool）命令与jmap搭配使用，来分析jmap生成的堆转储快照。jhat内置了一个微型的HTTP/HTML服务器，生成的dump文件的分析结果后，可以在浏览器中查看。一般不建议使用。可以使用其他工具分析，比如Eclipse Memory Analyzer、IBM HeapAnalyzer或JProfiler等工具，都可以实现更强大更专业的分析功能。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_171\bin&gt;jhat d:\dump.hprof</span><br><span class="line">Reading from d:\dump.hprof...</span><br><span class="line">Dump file created Thu Aug 20 21:22:50 CST 2020</span><br><span class="line">Snapshot read, resolving...</span><br><span class="line">Resolving 617466 objects...</span><br><span class="line">Chasing references, expect 123 dots...........................................................................................................................</span><br><span class="line">Eliminating duplicate references...........................................................................................................................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 7000</span><br><span class="line">Server is ready.</span><br></pre></td></tr></table></figure><p>在浏览器输入<code>http://localhost:7000</code>即可查看分析结果。</p><h3 id="jstack-：Java堆栈跟踪工具"><a href="#jstack-：Java堆栈跟踪工具" class="headerlink" title="jstack ：Java堆栈跟踪工具"></a>jstack ：Java堆栈跟踪工具</h3><p>jstack（Stack Trace for Java）命令用于生成虚拟机当前时刻的线程快照（一般称为threaddump或者javacore文件）。线程快照就是当前虚拟机内每一条线程正在执行的方法堆栈集合，生成线程快照的主要目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致的长时间等待等等都是导致线程长时间停顿的原因。线程出现停顿的时候通过jstack来查看各线程的调用堆栈，就可以知道没有响应的现场到底在后台做些什么事情，或者等待什么资源。</p><p><code>jtack的命令格式：</code></p><p><code>jstack [ option ] vmid </code></p><p>jstack工具主要选项</p><table><thead><tr><th align="center">选项</th><th>作用</th></tr></thead><tbody><tr><td align="center">-F</td><td>当正常输出的请求不被响应时，强制输出线程堆栈</td></tr><tr><td align="center">-l</td><td>除堆栈外，显示关于锁的附加信息</td></tr><tr><td align="center">-m</td><td>如果调用到本地方法的话，可以显示C/C++的堆栈</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files\Java\jdk1.8.0_171\bin&gt;jstack 3984</span><br><span class="line">2020-08-23 12:26:14</span><br><span class="line">Full thread dump OpenJDK 64-Bit Server VM (11.0.6+8-b765.40 mixed mode, sharing):</span><br><span class="line"></span><br><span class="line">Threads class SMR info:</span><br><span class="line">_java_thread_list=0x0000022dbefdb6d0, length=17, elements=&#123;</span><br><span class="line">0x0000022da3b28000, 0x0000022dbcc65800, 0x0000022dbcc67000, 0x0000022dbcc88800,</span><br><span class="line">0x0000022dbcc8b800, 0x0000022dbcc8d800, 0x0000022dbccf9800, 0x0000022dbd501000,</span><br><span class="line">0x0000022dbd5e4800, 0x0000022dbd5ea800, 0x0000022dbe0b6800, 0x0000022dbe0ab000,</span><br><span class="line">0x0000022dbe140800, 0x0000022dbe0e6800, 0x0000022dbe1bd800, 0x0000022dbe1ae800,</span><br><span class="line">0x0000022dbf12f000</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&quot;main&quot; #1 prio=5 os_prio=0 cpu=484.38ms elapsed=1227.43s tid=0x0000022da3b28000 nid=0x1ec0 in Object.wait()  [0x000000e64f7ff000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(java.base@11.0.6/Native Method)</span><br><span class="line">        - waiting on &lt;0x00000000d00e2010&gt; (a java.lang.Object)</span><br><span class="line">        at com.intellij.execution.rmi.RemoteServer.start(RemoteServer.java:91)</span><br><span class="line">        - waiting to re-lock in wait() &lt;0x00000000d00e2010&gt; (a java.lang.Object)</span><br><span class="line">        at org.jetbrains.idea.maven.server.RemoteMavenServer36.main(RemoteMavenServer36.java:23)</span><br><span class="line"></span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=2 cpu=0.00ms elapsed=1227.39s tid=0x0000022dbcc65800 nid=0x29e8 waiting on condition  [0x000000e64feff000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.lang.ref.Reference.waitForReferencePendingList(java.base@11.0.6/Native Method)</span><br><span class="line">        at java.lang.ref.Reference.processPendingReferences(java.base@11.0.6/Reference.java:241)</span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(java.base@11.0.6/Reference.java:213)</span><br><span class="line"></span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os_prio=1 cpu=0.00ms elapsed=1227.39s tid=0x0000022dbcc67000 nid=0x3158 in Object.wait()  [0x000000e64fffe000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(java.base@11.0.6/Native Method)</span><br><span class="line">        - waiting on &lt;0x00000000d00e23c0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.6/ReferenceQueue.java:155)</span><br><span class="line">        - waiting to re-lock in wait() &lt;0x00000000d00e23c0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.6/ReferenceQueue.java:176)</span><br><span class="line">        at java.lang.ref.Finalizer$FinalizerThread.run(java.base@11.0.6/Finalizer.java:170)</span><br><span class="line"></span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=2 cpu=0.00ms elapsed=1227.38s tid=0x0000022dbcc88800 nid=0x2364 runnable  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #5 daemon prio=5 os_prio=2 cpu=0.00ms elapsed=1227.38s tid=0x0000022dbcc8b800 nid=0x21d8 waiting on condition  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot; #6 daemon prio=9 os_prio=2 cpu=1109.38ms elapsed=1227.38s tid=0x0000022dbcc8d800 nid=0x57c waiting on condition  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">   No compile task</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread0&quot; #8 daemon prio=9 os_prio=2 cpu=671.88ms elapsed=1227.37s tid=0x0000022dbccf9800 nid=0x18bc waiting on condition  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">   No compile task</span><br><span class="line"></span><br><span class="line">&quot;Sweeper thread&quot; #9 daemon prio=9 os_prio=2 cpu=0.00ms elapsed=1227.36s tid=0x0000022dbd501000 nid=0x12d4 runnable  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; #10 daemon prio=9 os_prio=0 cpu=0.00ms elapsed=1227.33s tid=0x0000022dbd5e4800 nid=0xe38 runnable  [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Common-Cleaner&quot; #11 daemon prio=8 os_prio=1 cpu=0.00ms elapsed=1227.33s tid=0x0000022dbd5ea800 nid=0x488 in Object.wait()  [0x000000e6507fe000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(java.base@11.0.6/Native Method)</span><br><span class="line">        - waiting on &lt;0x00000000d01a1f98&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(java.base@11.0.6/ReferenceQueue.java:155)</span><br><span class="line">        - waiting to re-lock in wait() &lt;0x00000000d01a1f98&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at jdk.internal.ref.CleanerImpl.run(java.base@11.0.6/CleanerImpl.java:148)</span><br><span class="line">        at java.lang.Thread.run(java.base@11.0.6/Thread.java:834)</span><br><span class="line">        at jdk.internal.misc.InnocuousThread.run(java.base@11.0.6/InnocuousThread.java:134)</span><br><span class="line">        </span><br><span class="line"> // .................</span><br><span class="line"> </span><br><span class="line">&quot;RMI TCP Connection(idle)&quot; #27 daemon prio=5 os_prio=0 cpu=0.00ms elapsed=24.77s tid=0x0000022dbf12f000 nid=0x1724 waiting on condition  [0x000000e64f5fe000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">        at jdk.internal.misc.Unsafe.park(java.base@11.0.6/Native Method)</span><br><span class="line">        - parking to wait for  &lt;0x00000000d00b9568&gt; (a java.util.concurrent.SynchronousQueue$TransferStack)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.parkNanos(java.base@11.0.6/LockSupport.java:234)</span><br><span class="line">        at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(java.base@11.0.6/SynchronousQueue.java:462)</span><br><span class="line">        at java.util.concurrent.SynchronousQueue$TransferStack.transfer(java.base@11.0.6/SynchronousQueue.java:361)</span><br><span class="line">        at java.util.concurrent.SynchronousQueue.poll(java.base@11.0.6/SynchronousQueue.java:937)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(java.base@11.0.6/ThreadPoolExecutor.java:1053)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.6/ThreadPoolExecutor.java:1114)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(java.base@11.0.6/ThreadPoolExecutor.java:628)</span><br><span class="line">        at java.lang.Thread.run(java.base@11.0.6/Thread.java:834)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=2 cpu=31.25ms elapsed=1227.40s tid=0x0000022dbcc60000 nid=0x1d6c runnable</span><br><span class="line"></span><br><span class="line">&quot;GC Thread#0&quot; os_prio=2 cpu=31.25ms elapsed=1227.42s tid=0x0000022da3b44000 nid=0x2d7c runnable</span><br><span class="line"></span><br><span class="line">&quot;GC Thread#1&quot; os_prio=2 cpu=31.25ms elapsed=1226.21s tid=0x0000022dbe605800 nid=0x2220 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC Thread#2&quot; os_prio=2 cpu=15.63ms elapsed=1226.21s tid=0x0000022dbe58c800 nid=0x2200 runnable</span><br><span class="line"></span><br><span class="line">&quot;GC Thread#3&quot; os_prio=2 cpu=15.63ms elapsed=1226.21s tid=0x0000022dbe3bf800 nid=0x22e0 runnable</span><br><span class="line"></span><br><span class="line">&quot;G1 Main Marker&quot; os_prio=2 cpu=0.00ms elapsed=1227.42s tid=0x0000022da3b58800 nid=0x191c runnable</span><br><span class="line"></span><br><span class="line">&quot;G1 Conc#0&quot; os_prio=2 cpu=0.00ms elapsed=1227.42s tid=0x0000022da3b5a000 nid=0x8a0 runnable</span><br><span class="line"></span><br><span class="line">&quot;G1 Refine#0&quot; os_prio=2 cpu=15.63ms elapsed=1227.41s tid=0x0000022da3be4000 nid=0x148c runnable</span><br><span class="line"></span><br><span class="line">&quot;G1 Refine#1&quot; os_prio=2 cpu=0.00ms elapsed=1226.20s tid=0x0000022dbd68e800 nid=0x1460 runnable</span><br><span class="line"></span><br><span class="line">&quot;G1 Young RemSet Sampling&quot; os_prio=2 cpu=0.00ms elapsed=1227.41s tid=0x0000022da3be7000 nid=0x1e44 runnable</span><br><span class="line">&quot;VM Periodic Task Thread&quot; os_prio=2 cpu=0.00ms elapsed=1227.33s tid=0x0000022dbd5e5800 nid=0x4a8 waiting on condition</span><br><span class="line"></span><br><span class="line">JNI global refs: 17, weak refs: 0</span><br></pre></td></tr></table></figure><h3 id="基础工具总结"><a href="#基础工具总结" class="headerlink" title="基础工具总结"></a>基础工具总结</h3><h4 id="基础工具"><a href="#基础工具" class="headerlink" title="基础工具"></a>基础工具</h4><p>用于支持基本的程序创建和运行</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">appletviewer</td><td>在不使用Web浏览器的情况下运行和调试Applet、JDK11中被移除</td></tr><tr><td align="center">extcheck</td><td>检测Jar冲突的工具，从JDK9移除</td></tr><tr><td align="center">jar</td><td>创建和管理Jar文件</td></tr><tr><td align="center">java</td><td>Java运行工具，用于运行Class文件或Jar文件</td></tr><tr><td align="center">javac</td><td>用于Java的编程语言的编译器</td></tr><tr><td align="center">javadoc</td><td>Java的API文档生成器</td></tr><tr><td align="center">javah</td><td>C语言头文件和Stub函数生成器，用于编写JNI方法</td></tr><tr><td align="center">javap</td><td>Java字节码分析工具</td></tr><tr><td align="center">jlink</td><td>将Module和它的依赖打包成一个运行时镜像文件</td></tr><tr><td align="center">jdb</td><td>基于JPDA协议的调试器，以类似于GDB的方式进行调试Java代码</td></tr><tr><td align="center">jdeps</td><td>Java类依赖性分析器</td></tr><tr><td align="center">jdeprscan</td><td>用于搜索Jar包中使用了“Deprecated”的类，从JDK9开始提供</td></tr></tbody></table><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>用于程序签名、设置安全测试等</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">keytool</td><td>管理密钥库和证书。主要用于获取或缓存Kerberos协议的票据授权票据。允许用户查看本地凭据缓存和秘钥表中的条目</td></tr><tr><td align="center">jarsigner</td><td>生成并验证Jar签名</td></tr><tr><td align="center">policytool</td><td>管理策略文件的GUI工具，用于管理用户策略文件（.java.policy），在JDK10中被移除</td></tr></tbody></table><h4 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h4><p>用于创建本地语言文件</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">native2ascii</td><td>本地编码到ASCII编码的转换器（Native-to-ASCII Converter），用于“任意受支持的字符编码”和与之对应的“ASCII编码和Unicode转义”之间的相互转换</td></tr></tbody></table><h4 id="远程方法调用"><a href="#远程方法调用" class="headerlink" title="远程方法调用"></a>远程方法调用</h4><p>用于跨Web或网络的服务交互</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">rmic</td><td>Java RMI编译器，为使用JRMP或IIOP协议的远程对象生成Stub、Skeleton和Tie类，也用于生成OMG IDL</td></tr><tr><td align="center">rmiregistry</td><td>远程对象注册表服务，用于在当前主机的指定端口上创建并启动一个远程对象注册表</td></tr><tr><td align="center">rmid</td><td>启动激活系统守护进程，允许在虚拟机中注册或激活对象</td></tr><tr><td align="center">serialver</td><td>生成并返回指定类的序列化版本ID</td></tr></tbody></table><h4 id="Java-IDL与RMI-IIOP"><a href="#Java-IDL与RMI-IIOP" class="headerlink" title="Java IDL与RMI-IIOP"></a>Java IDL与RMI-IIOP</h4><p>在JDK 11中结束了十余年的CORBA支持，这些工具不在提供</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">tnameserv</td><td>提供对命名服务的访问</td></tr><tr><td align="center">idlj</td><td>IDL转Java编译器（IDL-to-Java Compiler），生成映射OMG IDL接口的Java源文件，并启用以Java编程语言编写的使用CORBA功能的应用程序的Java源文件。IDL意即接口定义语言（Interface Definition Language）</td></tr><tr><td align="center">orbd</td><td>对象请求代理守护进程（Object Request Broker Daemon），提供从客户端查找和调用CORBA环境服务端上的持久化对象的功能。使用CORBA代理瞬态命名服务tnameserv。ORBD包括瞬态命名服务和持久化命名服务。ORBD工具集成了服务器管理器、互操作命名服务和引导名称服务器的功能。当客户端想进行服务器时定位、注册和激活功能时，可以与servertool一起使用</td></tr><tr><td align="center">servertool</td><td>为应用程序注册、注销、启动和关闭服务器提供易用的接口</td></tr></tbody></table><h4 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h4><p>用于程序打包、发布和部署。</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">javapackager</td><td>打包、签名Java和JavaFX应用程序，在JDK11中被移除</td></tr><tr><td align="center">pack200</td><td>使用Java GZIP压缩器将JAR文件转换为压缩的Pack200文件。压缩的压缩文件是高度压缩的JAR，可以直接部署，节省带宽并减少下载时间</td></tr><tr><td align="center">unpack200</td><td>将Pack200生成的打包文件解压提取为JAR文件</td></tr></tbody></table><h4 id="Java-Web-Start"><a href="#Java-Web-Start" class="headerlink" title="Java Web Start"></a>Java Web Start</h4><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">javaws</td><td>启动Java Web Start并设置各种选项的工具。在JDK11中被移除</td></tr></tbody></table><h4 id="性能监控和故障处理"><a href="#性能监控和故障处理" class="headerlink" title="性能监控和故障处理"></a>性能监控和故障处理</h4><p>用于监控分析Java虚拟机运行信息，排查问题</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">jps</td><td>JVM Process Status Tool，显示指定系统内所有的HotSpot虚拟机进程</td></tr><tr><td align="center">jstat</td><td>JVM Statistics Monitoring Tool，用于收集HotSpot虚拟机各方面的运行数据</td></tr><tr><td align="center">jstatd</td><td>JVM Statistics Monitoring Tool Daemon，jstat的守护程序，启动一个RMI服务器应用程序，用于监测测试的HotSpot虚拟机的创建和终止，并提供一个界面，运行远程监控工具附加到在本地系统上运行的虚拟机。在JDK9中集成到了JHSDB中</td></tr><tr><td align="center">jinfo</td><td>Configuration Info for Java，显示虚拟机配置信息。在JDK9中集成到了JHSDB中</td></tr><tr><td align="center">jmap</td><td>Memory Map for Java，生成虚拟机的内存转储快照（heapdump文件）。在JDK9中集成到了JHSDB中</td></tr><tr><td align="center">jhat</td><td>JVM Heap Analysis Tool，用于分析堆转储快照，它会建立一个HTTP/Web服务器， 让用户可以在浏览器上查看分析的结果。在JDK9中被JHSDB代替</td></tr><tr><td align="center">jstack</td><td>Stack Trace for Java，显示虚拟机的线程快照。在JDK9中集成到了JHSDB中</td></tr><tr><td align="center">jhsdb</td><td>Java HotSpot Debugger，一个基于Serviceability Agent的HotSpot进程调试器，从JDK9开始提供</td></tr><tr><td align="center">jsadebugd</td><td>Java Serviceability Agent Debug Daemon，适用于Java的可维护性代理调试守护程序，主要用于附加到指定的Java进程、核心文件，或充当一个调试服务器</td></tr><tr><td align="center">jcmd</td><td>JVM Command，虚拟机诊断命令工具，将诊断命令请求发送到正在运行的Java虚拟机。从JDK7开始提供</td></tr><tr><td align="center">jconsole</td><td>Java Console，用于监控Java虚拟机的使用JMX规范的图形工具。它可以监控本地和远程Java虚拟机，还可以监控和管理应用程序</td></tr><tr><td align="center">jmc</td><td>Java Mission Control，包含用于监控和管理Java应用程序的工具，而不会引入与这些工具相关联的性能开销。开发者可以使用jmc命令来创建JMC工具，从JDK7 Update 40开始集成到OracleJDK中</td></tr><tr><td align="center">jvisualvm</td><td>Java VisualVM，一种图形工具，可在Java虚拟机中运行时提供有关基于Java技术的应用程序（Java应用程序）的详细信息。Java VisualVM提供内存和CPU分析、堆转储分析、内存泄漏检测、MBean访问和垃圾收集。从JDK6 Update 7开始提供；从JDK9开始不再打包入JDK中，但仍然保持更新发展，可以独立下载使用</td></tr></tbody></table><h4 id="WebService工具"><a href="#WebService工具" class="headerlink" title="WebService工具"></a>WebService工具</h4><p>与CORBA一起在JDK11被移除</p><table><thead><tr><th align="center">名称</th><th>主要作用</th></tr></thead><tbody><tr><td align="center">schemagen</td><td>用于XML绑定的Schema生成器，用于生成XML Schema文件</td></tr><tr><td align="center">wsgen</td><td>XML Web Service 2.0的Java API，生成用于JAX-WS Web Service的JAX-WS便携式产物</td></tr><tr><td align="center">wsimport</td><td>XML Web Service 2.0的Java API，主要用于根据服务端发布的WSDL文件生成客户端</td></tr><tr><td align="center">xjc</td><td>主要用于根据XML Schema文件生成对应的Java类</td></tr></tbody></table><h4 id="REPL和脚本工具"><a href="#REPL和脚本工具" class="headerlink" title="REPL和脚本工具"></a>REPL和脚本工具</h4><table><thead><tr><th align="center">名称</th><th align="center">主要作用</th></tr></thead><tbody><tr><td align="center">jshell</td><td align="center">基于Java的Shell REPL（Read-Eval-Print Loop）交互工具</td></tr><tr><td align="center">jjs</td><td align="center">对Nashorn引擎的调用入口。Nashorn是基于Java实现的一个轻量级高性能JavaScript运行环境</td></tr><tr><td align="center">jrunscript</td><td align="center">Java命令行脚本外壳工具（Command Line Script Shell），主要用于解释执行JavaScript、Groovy、Ruby等脚本语言</td></tr></tbody></table><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了JDK提供的自带的常用故障处理工具，在日常线上环境使用的尤为频繁，JDK还提供了可视化的工具就不介绍了，有兴趣的可以自己去尝试使用，如：JConsole和VisualVM等可视化工具。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JVM-性能监控与故障处理工具&quot;&gt;&lt;a href=&quot;#JVM-性能监控与故障处理工具&quot; class=&quot;headerlink&quot; title=&quot;JVM 性能监控与故障处理工具&quot;&gt;&lt;/a&gt;JVM 性能监控与故障处理工具&lt;/h2&gt;&lt;h3 id=&quot;JDK-命令行工具&quot;&gt;&lt;a href=&quot;#JDK-命令行工具&quot; class=&quot;headerlink&quot; title=&quot;JDK 命令行工具&quot;&gt;&lt;/a&gt;JDK 命令行工具&lt;/h3&gt;&lt;p&gt;Java开发人员肯定知道JDK的bin目录中有&lt;code&gt;java.exe&lt;/code&gt;、&lt;code&gt;javac.exe&lt;/code&gt;这两个命令行工具，但还有很多其他工具提供稳定而强大的功能，能在处理应用程序性能问题、定位故障时发挥很大的作用。下面来介绍一下Java提供的那些强大并且很有帮助的工具吧。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM 笔记" scheme="https://chivalry727.github.io/categories/JVM-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JVM 性能监控工具" scheme="https://chivalry727.github.io/tags/JVM-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7/"/>
    
      <category term="JVM 故障处理工具" scheme="https://chivalry727.github.io/tags/JVM-%E6%95%85%E9%9A%9C%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
      <category term="JDK 工具" scheme="https://chivalry727.github.io/tags/JDK-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>https://chivalry727.github.io/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-08-18T08:13:23.000Z</published>
    <updated>2020-08-20T11:47:57.425Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试总结（某电商公司）"><a href="#面试总结（某电商公司）" class="headerlink" title="面试总结（某电商公司）"></a>面试总结（某电商公司）</h2><h3 id="Mybatis-懒加载"><a href="#Mybatis-懒加载" class="headerlink" title="Mybatis 懒加载"></a>Mybatis 懒加载</h3><h4 id="什么是懒加载"><a href="#什么是懒加载" class="headerlink" title="什么是懒加载"></a>什么是懒加载</h4><p>延迟加载又叫懒加载，也叫按需加载，也就是说先加载主信息，需要的时候，再去加载从信息。代码中有查询语句，当执行到查询语句时，并不是马上去DB中查询，而是根据设置的延迟策略将查询向后推迟。</p><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>减轻DB服务器的压力，因为我们延迟加载只有在用到需要的数据才会执行查询操作。</p><a id="more"></a><h4 id="如何配置"><a href="#如何配置" class="headerlink" title="如何配置"></a>如何配置</h4><ul><li>Mybatis-config.xml里配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span> =<span class="string">&quot;aggressiveLazyLoading&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--开启延迟加载--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Mapper里配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xxx.mapper.AccountMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义封装 Account和User 的resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Account&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置封装 User 的内容</span></span><br><span class="line"><span class="comment">            select：查询用户的唯一标识</span></span><br><span class="line"><span class="comment">            column：用户根据id查询的时候，需要的参数值</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;user&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;User&quot;</span>     <span class="attr">select</span>=<span class="string">&quot;com.xxx.mapper.UserMapper.findById&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据查询所有账户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userAccountMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM account</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xxx.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义User的resultMap--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userAccountMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;telephone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;telephone&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;birthday&quot;</span> <span class="attr">column</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gender&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">column</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;accounts&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;account&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;money&quot;</span> <span class="attr">column</span>=<span class="string">&quot;money&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据id查询用户 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;INT&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就可以实现按需加载，达到我们的目的。</p><h3 id="分布式锁如何实现"><a href="#分布式锁如何实现" class="headerlink" title="分布式锁如何实现"></a>分布式锁如何实现</h3><h4 id="基于数据库"><a href="#基于数据库" class="headerlink" title="基于数据库"></a>基于数据库</h4><p>在数据库中创建一个表，表中包含方法名等字段，并在方法名字段上创建唯一索引，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DROP TABLE IF EXISTS &#96;method_lock&#96;;</span><br><span class="line">CREATE TABLE &#96;method_lock&#96; (</span><br><span class="line">  &#96;id&#96; int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT &#39;主键&#39;,</span><br><span class="line">  &#96;method_name&#96; varchar(64) NOT NULL COMMENT &#39;锁定的方法名&#39;,</span><br><span class="line">  &#96;desc&#96; varchar(255) NOT NULL COMMENT &#39;备注信息&#39;,</span><br><span class="line">  &#96;update_time&#96; timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;),</span><br><span class="line">  UNIQUE KEY &#96;uidx_method_name&#96; (&#96;method_name&#96;) USING BTREE</span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;3 DEFAULT CHARSET&#x3D;utf8 COMMENT&#x3D;&#39;锁定中的方法&#39;;</span><br></pre></td></tr></table></figure><p>执行某个方法后，插入一条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO method_lock (method_name, desc) VALUES (&#39;methodName&#39;, &#39;测试的methodName&#39;);</span><br></pre></td></tr></table></figure><p>因为我们对method_name做了唯一性约束，这里如果有多个请求同时提交到数据库的话，数据库会保证只有一个操作可以成功，那么我们就可以认为操作成功的那个线程获得了该方法的锁，可以执行方法体内容。</p><p>成功插入则获取锁，执行完成后删除对应的行数据释放锁：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from method_lock where method_name &#x3D;&#39;methodName&#39;;</span><br></pre></td></tr></table></figure><p>优点：易于理解实现</p><p>缺点：</p><p>（1）因为是基于数据库实现的，数据库的可用性和性能将直接影响分布式锁的可用性及性能，所以，数据库需要双机部署、数据同步、主备切换。 </p><p>（2）不具备可重入的特性，因为同一个线程在释放锁之前，行数据一直存在，无法再次成功插入数据，所以，需要在表中新增一列，用于记录当前获取到锁的机器和线程信息，在再次获取锁的时候，先查询表中机器和线程信息是否和当前机器和线程信息相同，若相同则直接获取锁； </p><p>（3）没有锁失效机制，因为有可能出现成功插入数据后，服务器宕机了，对应的数据没有被删除，当服务恢复后一直获取不到锁，所以，需要在锁中新增一列，用于记录失效时间，并且需要有定时任务清除这些失效的数据； </p><p>（4）不具备阻塞锁特性，获取不到锁直接返回失败，所以需要优化获取逻辑，循环多次去获取。</p><h4 id="基于Redis"><a href="#基于Redis" class="headerlink" title="基于Redis"></a>基于Redis</h4><p>选择Redis分布式锁的原因：</p><ul><li><p>redis有很高的性能； </p></li><li><p>redis对此支持的命令较好，实现起来比较方便</p></li></ul><p>使用的命令：</p><ul><li>SETNX：<code>SETNX key val</code> 当且仅当key不存在时，set一个key为val的字符串，返回1；若key存在，则什么都不做，返回0</li><li>expire：<code>expire key timeout</code> 设置超时时间，单位为s，超过这个时间就会自动释放锁，避免死锁</li><li>delete：<code>delete key</code> 释放锁</li></ul><p>实现思想：</p><ol><li>获取锁的时候，使用setnx加锁，并使用expire命令给锁加一个超时时间，超过该时间则自动释放锁，锁的value值为一个随机生成的UUID，通过此在释放锁的时候进行判断。 </li><li>获取锁的时候还设置一个获取的超时时间，若超过这个时间则放弃获取锁。 </li><li>释放锁的时候，通过UUID判断是不是该锁，若是该锁，则执行进行锁释放。</li></ol><p>优点：</p><ol><li>吞吐量高</li><li>有锁失效自动删除机制，保证不会阻塞所有流程</li></ol><p>缺点:</p><ol><li>单点故障问题</li><li>锁超时问题：如果A拿到锁之后设置了超时时长，但是业务还未执行完成且锁已经被释放，此时其他进程就会拿到锁从而执行相同的业务。如何解决？Redission定时延长超时时长避免过期。为什么不直接设置为永不超时？为了防范业务方没写解锁方法或者发生异常之后无法进行解锁的问题</li><li>轮询获取锁状态方式太过低效</li></ol><h4 id="基于Zookeeper"><a href="#基于Zookeeper" class="headerlink" title="基于Zookeeper"></a>基于Zookeeper</h4><p>ZooKeeper是一个为分布式应用提供一致性服务的开源组件，它内部是一个分层的文件系统目录树结构，规定同一个目录下只能有一个唯一文件名。</p><p>基于ZooKeeper实现分布式锁的步骤如下：</p><ol><li>创建一个目录mylock； </li><li>线程A想获取锁就在mylock目录下创建临时顺序节点；</li><li>获取mylock目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁； </li><li>线程B获取所有节点，判断自己不是最小节点，设置监听比自己小的节点； </li><li>线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小节点，如果是则获得锁。</li></ol><p>这里推荐一个Apache的开源库Curator，它是一个ZooKeeper客户端，Curator提供的InterProcessMutex是分布式锁的实现，acquire方法用于获取锁，release用于释放锁。</p><p>优点：具备高可用、可重入、阻塞锁特性，可解决失效死锁问题。</p><p>缺点：因为需要频繁的创建和删除节点，性能上不如redis方式，强依赖zk</p><h3 id="DynamoDB-优势"><a href="#DynamoDB-优势" class="headerlink" title="DynamoDB 优势"></a>DynamoDB 优势</h3><ul><li><p>规模性能</p><p>DynamoDB 通过在任意规模环境中提供一致的个位数毫秒响应时间，支持世界上一些最大规模的应用程序。您可以构建吞吐量和存储空间几乎无限的应用程序。DynamoDB 全局表可跨多个 AWS 区域复制您的数据，使您能够快速在本地访问全局分布的应用程序的数据。对于需要以微秒级延迟执行更快访问的使用案例，DynamoDB Accelerator (DAX) 提供了完全托管的内存缓存</p></li><li><p>无须管理服务器</p><p>DynamoDB 是无服务器服务，无需预配置、修补或管理服务器，也不需要安装、维护或操作软件。DynamoDB 可自动纵向扩展和缩减表，以针对容量做出调整并保持性能。由于内置了可用性和容错能力，您无需为这些功能构建应用程序。DynamoDB 提供预配置和按需容量模式，使您能够通过指定每个工作负载的容量或只为您使用的资源付费，从而优化成本。</p></li><li><p>企业级</p><p>DynamoDB 支持 ACID 事务，使您能够大规模构建业务关键型应用程序。DynamoDB 默认加密所有数据，并为您的所有表提供细粒度的身份和访问控制。您可以立即创建数百 TB 数据的完整备份，而不会对您的表性能产生影响，并且可以恢复到先前的 35 天内的任何时间点，而无需停机。DynamoDB 还提供有服务级别协议，从而确保可用性。</p></li></ul><h3 id="Spring-解决循环依赖"><a href="#Spring-解决循环依赖" class="headerlink" title="Spring  解决循环依赖"></a>Spring  解决循环依赖</h3><p>循环依赖就是N个类中循环嵌套引用，如果在日常开发中我们用new 对象的方式发生这种循环依赖的话程序会在运行时一直循环调用，直至内存溢出报错。下面说一下Spring是如果解决的。</p><p>Spring对循环依赖的处理有三种情况： </p><ol><li>构造器的循环依赖：这种依赖spring是处理不了的，直接抛出<code>BeanCurrentlylnCreationException</code>异常。 </li><li>单例模式下的setter循环依赖，通过“三级缓存”来处理循环依赖。 </li><li>非单例Bean的循环依赖，无法处理。</li></ol><p>DefaultSingletonBeanRegistry的实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Cache of singleton objects: bean name –&gt; bean instance */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map singletonObjects = <span class="keyword">new</span> ConcurrentHashMap(<span class="number">256</span>);</span><br><span class="line"><span class="comment">/** Cache of singleton factories: bean name –&gt; ObjectFactory */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&gt; singletonFactories = <span class="keyword">new</span> HashMap&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">/** Cache of early singleton objects: bean name –&gt; bean instance */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map earlySingletonObjects = <span class="keyword">new</span> HashMap(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="comment">//isSingletonCurrentlyInCreation()判断当前单例bean是否正在创建中</span></span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="comment">//allowEarlyReference 是否允许从singletonFactories中通过getObject拿到对象</span></span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="comment">//从singletonFactories中移除，并放入earlySingletonObjects中。</span></span><br><span class="line">                    <span class="comment">//其实也就是从三级缓存移动到了二级缓存</span></span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口在AbstractBeanFactory里实现，并在核心方法doCreateBean（）引用下面的方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addSingletonFactory</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(singletonFactory, <span class="string">&quot;Singleton factory must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.singletonObjects.containsKey(beanName)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.singletonFactories.put(beanName, singletonFactory);</span><br><span class="line">            <span class="keyword">this</span>.earlySingletonObjects.remove(beanName);</span><br><span class="line">            <span class="keyword">this</span>.registeredSingletons.add(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mysql-索引的数据结构"><a href="#Mysql-索引的数据结构" class="headerlink" title="Mysql 索引的数据结构"></a>Mysql 索引的数据结构</h3><h4 id="索引是什么"><a href="#索引是什么" class="headerlink" title="索引是什么"></a>索引是什么</h4><p>索引是帮助数据库高效获取数据的数据结构</p><h4 id="索引的分类"><a href="#索引的分类" class="headerlink" title="索引的分类"></a>索引的分类</h4><h5 id="从存储结构上来划分"><a href="#从存储结构上来划分" class="headerlink" title="从存储结构上来划分"></a>从存储结构上来划分</h5><ul><li>Btree 索引（B+tree，B-tree)</li><li>哈希索引</li><li>full-index 全文索引</li><li>RTree</li></ul><h5 id="从应用层次上来划分"><a href="#从应用层次上来划分" class="headerlink" title="从应用层次上来划分"></a>从应用层次上来划分</h5><ul><li>普通索引：即一个索引只包含单个列，一个表可以有多个单列索引。</li><li>唯一索引：索引列的值必须唯一，但允许有空值。</li><li>复合索引：一个索引包含多个列。</li></ul><h5 id="从表记录的排列顺序和索引的排列顺序是否一致来划分"><a href="#从表记录的排列顺序和索引的排列顺序是否一致来划分" class="headerlink" title="从表记录的排列顺序和索引的排列顺序是否一致来划分"></a>从表记录的排列顺序和索引的排列顺序是否一致来划分</h5><ul><li>聚集索引：表记录的排列顺序和索引的排列顺序一致。</li><li>非聚集索引：表记录的排列顺序和索引的排列顺序不一致。</li></ul><h5 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h5><ul><li>聚集索引：就是以主键创建的索引。</li><li>非聚集索引：就是以非主键创建的索引（也叫做二级索引）</li></ul><h4 id="Mysql-索引的数据结构-1"><a href="#Mysql-索引的数据结构-1" class="headerlink" title="Mysql 索引的数据结构"></a>Mysql 索引的数据结构</h4><h5 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h5><p>可能直接想到的就是用哈希表来实现快速查找，就像我们平时用的 hashmap 一样，value = get(key)， O(1) 时间复杂度一步到位，确实，<strong>哈希索引</strong> 是一种方式。</p><p>定义</p><p>哈希索引就是采用一定的哈希算法，只需一次哈希算法即可立刻定位到相应的位置，速度非常快。<strong>本质上就是把键值换算成新的哈希值，根据这个哈希值来定位</strong></p><p>局限性</p><ul><li>哈希索引没办法利用索引完成排序。</li><li>不能进行多字段查询。</li><li>在有大量重复键值的情况下，哈希索引的效率也是极低的（出现哈希碰撞问题）。</li><li>不支持范围查询。</li></ul><p>在 MySQL 常用的 InnoDB 引擎中，还是使用 B+ 树索引比较多。InnoDB 是自适应哈希索引的（hash 索引的创建由 <strong>InnoDB 存储引擎自动优化创建</strong>）。</p><h5 id="B-树"><a href="#B-树" class="headerlink" title="B 树"></a>B 树</h5><p>目前索引常用的数据结构是 B+ 树，先介绍一下什么是 B 树（也就是 B- 树）。</p><p>B 树的特点：</p><ul><li>关键字分布在整棵树的所有节点。</li><li>任何一个关键字 <strong>出现且只出现在一个节点中</strong>。</li><li>搜索有可能在 <strong>非叶子节点</strong> 结束。</li><li>其搜索性能等价于在关键字全集内做一次二分查找</li></ul><h5 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+ 树"></a>B+ 树</h5><p>了解了 B 树，再来看一下 B+ 树，也是 MySQL 索引大部分情况所使用的数据结构</p><p>B+ 树基本特点</p><ul><li>非叶子节点的子树指针与关键字个数相同。</li><li>非叶子节点的子树指针 P[i]，指向关键字属于 <strong>[k[i],K[i+1])</strong> 的子树（<strong>注意：区间是前闭后开</strong>)。</li><li><strong>为所有叶子节点增加一个链指针</strong>。</li><li><strong>所有关键字都在叶子节点出现</strong></li></ul><p>B+ 树的特性</p><ul><li>所有的关键字 <strong>都出现在叶子节点的链表中</strong>，且链表中的关键字是有序的。</li><li><strong>搜索只在叶子节点命中</strong>。</li><li>非叶子节点相当于是 <strong>叶子节点的索引层</strong>，叶子节点是 <strong>存储关键字数据的数据层</strong>。</li></ul><p>相对 B 树，B+ 树做索引的优势</p><ul><li>B+ 树的磁盘读写代价更低。<strong>B+ 树的内部没有指向关键字具体信息的指针</strong>，所以其内部节点相对 B 树更小，如果把所有关键字存放在同一块盘中，那么盘中所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，<strong>相应的，IO 读写次数就降低了</strong>。</li><li><strong>树的查询效率更加稳定</strong>。B+ 树所有数据都存在于叶子节点，所有关键字查询的路径长度相同，每次数据的查询效率相当。而 B 树可能在非叶子节点就停止查找了，所以查询效率不够稳定。</li><li><strong>B+ 树只需要去遍历叶子节点就可以实现整棵树的遍历</strong></li></ul><h4 id="索引失效"><a href="#索引失效" class="headerlink" title="索引失效"></a>索引失效</h4><ol><li><h4 id="违反最左匹配原则"><a href="#违反最左匹配原则" class="headerlink" title="违反最左匹配原则"></a>违反最左匹配原则</h4><p><strong>最左匹配原则</strong>：最左优先，以最左边的为起点任何连续的索引都能匹配上，如不连续，则匹配不上。</p><p>如：建立索引为 (a,b) 的联合索引，那么只查 where b = 2 则不生效。换句话说：如果建立的索引是 (a,b,c)，也只有 (a),(a,b),(a,b,c) 三种查询可以生效</p></li><li><h4 id="在索引列上做任何操作"><a href="#在索引列上做任何操作" class="headerlink" title="在索引列上做任何操作"></a>在索引列上做任何操作</h4><p>如计算、函数、（手动或自动）类型转换等操作，会导致索引失效而进行全表扫描。</p></li><li><h4 id="使用不等于（-、-lt-gt-）"><a href="#使用不等于（-、-lt-gt-）" class="headerlink" title="使用不等于（!= 、&lt;&gt;）"></a>使用不等于（!= 、&lt;&gt;）</h4></li><li><h4 id="like-中以通配符开头-’-abc’"><a href="#like-中以通配符开头-’-abc’" class="headerlink" title="like 中以通配符开头 (’%abc’)"></a>like 中以通配符开头 (’%abc’)</h4><p>索引失效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where name like &#39;%zhangsan&#39;;</span><br></pre></td></tr></table></figure><p>索引生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where name like &#39;zhangsan%;</span><br></pre></td></tr></table></figure></li><li><h4 id="字符串不加单引号索引失效"><a href="#字符串不加单引号索引失效" class="headerlink" title="字符串不加单引号索引失效"></a>字符串不加单引号索引失效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where name &#x3D; 2000;</span><br></pre></td></tr></table></figure></li><li><h4 id="or-连接索引失效"><a href="#or-连接索引失效" class="headerlink" title="or 连接索引失效"></a>or 连接索引失效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where name &#x3D; &#39;2000&#39; or age &#x3D; 20 or pos &#x3D;&#39;cxy&#39;;</span><br></pre></td></tr></table></figure></li><li><h4 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h4><p>正常（索引参与了排序），没有违反最左匹配原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select * from user where name &#x3D; &#39;zhangsan&#39; and age &#x3D; 20 order by age,pos;</span><br></pre></td></tr></table></figure></li><li><h4 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h4><p>正常（索引参与了排序）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select name,age from user where name &#x3D; &#39;zhangsan&#39; group by age;</span><br></pre></td></tr></table></figure><p>违反最左前缀法则，导致产生临时表（会降低性能）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain select name,age from user where name &#x3D; &#39;zhangsan&#39; group by pos,age;</span><br></pre></td></tr></table></figure></li></ol><h3 id="SpringBoot-运行原理"><a href="#SpringBoot-运行原理" class="headerlink" title="SpringBoot 运行原理"></a>SpringBoot 运行原理</h3><p>Spring 启动流程</p><ol><li>监听开始启动</li><li>创建上下文， <code>createApplicationContext</code>默认创建Servlet上下文，可以指定<code>webApplicationType</code>类型</li><li>准备上下文，准备上下文的外部化配置等</li><li>启动上下文，其实就是运行Spring的Application的refresh启动上下文，并扫描和注册Spring组件</li><li>监听已启动</li><li>监听开始运行</li></ol><p>Spring 自动装配</p><p>spring.factories里配置了默认的自动装配类，会根据条件进行选择装配</p><h3 id="Dubbo-服务挂了，如何实现重试？"><a href="#Dubbo-服务挂了，如何实现重试？" class="headerlink" title="Dubbo 服务挂了，如何实现重试？"></a>Dubbo 服务挂了，如何实现重试？</h3><p>如果注册中心挂了，消费者会从本地缓存里读取服务提供者的地址，进行通讯，直到注册中心恢复，然后重新去注册中心获取服务列表，</p><p>保证服务的高可用。</p><h3 id="K8s的作用，如何编排"><a href="#K8s的作用，如何编排" class="headerlink" title="K8s的作用，如何编排"></a>K8s的作用，如何编排</h3><p>容器编排平台， 我们将单体式的架构拆分成越来越多细小的服务，运行在各自的容器中，那么该如何解决它们之间的依赖管理，服务发现，资源管理，高可用等问题</p><p><strong>在容器环境中，编排通常涉及到三个方面:</strong></p><ul><li>资源编排 - 负责资源的分配，如限制 namespace 的可用资源，scheduler 针对资源的不同调度策略；</li><li>工作负载编排 - 负责在资源之间共享工作负载，如 Kubernetes 通过不同的 controller 将 Pod 调度到合适的 node 上，并且负责管理它们的生命周期；</li><li>服务编排 - 负责服务发现和高可用等，如 Kubernetes 中可用通过 Service 来对内暴露服务，通过 Ingress 来对外暴露服务。</li></ul><h3 id="线程池的原理，参数配置"><a href="#线程池的原理，参数配置" class="headerlink" title="线程池的原理，参数配置"></a>线程池的原理，参数配置</h3><h3 id="G1和CMS的区别"><a href="#G1和CMS的区别" class="headerlink" title="G1和CMS的区别"></a>G1和CMS的区别</h3><p>按分代收集来说，CMS是老年代收集器，G1则是混合收集，它开创了混合收集的模式，衡量标准不在是属于哪个分代，而是哪块内存值得收集，哪块内存中存放的垃圾数量最多，回收收益最大来进行收集。</p><p>按收集算法来说，CMS收集器是基于标记-清除的垃圾收集器，由于CMS是一款基于“标记-清除”算法实现的收集器，就会造成大量空间碎片产生，如果空间碎片过多时，当需要足够大大连续空间来分配大对象大时候，会不得不提前触发Full GC的情况；而G1从整体来看是基于“标记-整理”算法实现的收集器，从局部上看（两个Region之间）又是基于“标记-复制”算法实现，无论如何，这两种算法在运行期间都不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存</p><h3 id="Mysql数据库的默认隔离级别"><a href="#Mysql数据库的默认隔离级别" class="headerlink" title="Mysql数据库的默认隔离级别"></a>Mysql数据库的默认隔离级别</h3><p>REPEATABLE_READ</p><h3 id="gRPC框架的原理，序列化在哪一层"><a href="#gRPC框架的原理，序列化在哪一层" class="headerlink" title="gRPC框架的原理，序列化在哪一层"></a>gRPC框架的原理，序列化在哪一层</h3><p>gRPC 默认使用 Protocol Buffers 作为 RPC 序列化框架，通过 Protocol Buffers 对消息进行序列化和反序列化，然后通过 Netty 的 HTTP/2，以 Stream 的方式进行数据传输。</p><p>由于存在一些特殊的处理，gRPC 并没有直接使用 Netty 提供的 Protocol Buffers Handler, 而是自己集成 Protocol Buffers 工具类进行序列化和反序列化，下面一起分析它的设计和实现原理。</p><h3 id="gRPC-如何实现服务发现以及使用的什么负载均衡策略"><a href="#gRPC-如何实现服务发现以及使用的什么负载均衡策略" class="headerlink" title="gRPC 如何实现服务发现以及使用的什么负载均衡策略"></a>gRPC 如何实现服务发现以及使用的什么负载均衡策略</h3><p>服务发现与负载均衡<br>当server端是集群部署时，client调用server就需要用到服务发现与负载均衡。通常有两总方式：</p><p>一种方式是在client与server之间加代理，由代理来做负载均衡<br>一种方式是将服务注册到一个数据中心，client通过数据中心查询到所有服务的节点信息，然后自己选择负载均衡的策略</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;面试总结（某电商公司）&quot;&gt;&lt;a href=&quot;#面试总结（某电商公司）&quot; class=&quot;headerlink&quot; title=&quot;面试总结（某电商公司）&quot;&gt;&lt;/a&gt;面试总结（某电商公司）&lt;/h2&gt;&lt;h3 id=&quot;Mybatis-懒加载&quot;&gt;&lt;a href=&quot;#Mybatis-懒加载&quot; class=&quot;headerlink&quot; title=&quot;Mybatis 懒加载&quot;&gt;&lt;/a&gt;Mybatis 懒加载&lt;/h3&gt;&lt;h4 id=&quot;什么是懒加载&quot;&gt;&lt;a href=&quot;#什么是懒加载&quot; class=&quot;headerlink&quot; title=&quot;什么是懒加载&quot;&gt;&lt;/a&gt;什么是懒加载&lt;/h4&gt;&lt;p&gt;延迟加载又叫懒加载，也叫按需加载，也就是说先加载主信息，需要的时候，再去加载从信息。代码中有查询语句，当执行到查询语句时，并不是马上去DB中查询，而是根据设置的延迟策略将查询向后推迟。&lt;/p&gt;
&lt;h4 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h4&gt;&lt;p&gt;减轻DB服务器的压力，因为我们延迟加载只有在用到需要的数据才会执行查询操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="面试总结" scheme="https://chivalry727.github.io/categories/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面试" scheme="https://chivalry727.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之命令模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-16T12:39:28.000Z</published>
    <updated>2020-08-16T14:18:37.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之命令模式"><a href="#每天一个设计模式之命令模式" class="headerlink" title="每天一个设计模式之命令模式"></a>每天一个设计模式之命令模式</h2><h3 id="第一个命令对象"><a href="#第一个命令对象" class="headerlink" title="第一个命令对象"></a>第一个命令对象</h3><p>实现命令接口</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 命令接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:42:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现一个打开电灯的命令"><a href="#实现一个打开电灯的命令" class="headerlink" title="实现一个打开电灯的命令"></a>实现一个打开电灯的命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电灯类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:44:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Light is off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;z</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开电灯的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:43:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建一个简单遥控器"><a href="#创建一个简单遥控器" class="headerlink" title="创建一个简单遥控器"></a>创建一个简单遥控器</h3><p>设计一个遥控器对象，它只有一个按钮和对应的插槽，可以控制一个简单装置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的遥控器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:47:25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleRemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个插槽</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Command slot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置插槽控制的命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        slot = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按下按钮的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buttonWasPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        slot.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遥控器使用的简单测试"><a href="#遥控器使用的简单测试" class="headerlink" title="遥控器使用的简单测试"></a>遥控器使用的简单测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遥控器简单测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:49:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControlTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实例化一个简单遥控器装置</span></span><br><span class="line">        SimpleRemoteControl remote = <span class="keyword">new</span> SimpleRemoteControl();</span><br><span class="line">        <span class="comment">// 创建一个电灯</span></span><br><span class="line">        Light light = <span class="keyword">new</span> Light();</span><br><span class="line">        <span class="comment">// 创建一个命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 把命令传给调用者</span></span><br><span class="line">        remote.setCommand(lightOnCommand);</span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        remote.buttonWasPressed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义命令模式"><a href="#定义命令模式" class="headerlink" title="定义命令模式"></a>定义命令模式</h3><p>命令模式将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作。</p><h3 id="定义命令模式类图"><a href="#定义命令模式类图" class="headerlink" title="定义命令模式类图"></a>定义命令模式类图</h3><p><img src="http://wx1.sinaimg.cn/large/008aQ1h9ly1ght0jhsvzdj30rq0mqqi2.jpg"></p><h3 id="实现一个复杂遥控器"><a href="#实现一个复杂遥控器" class="headerlink" title="实现一个复杂遥控器"></a>实现一个复杂遥控器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遥控器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:59:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteControl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一组打开命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Command[] onCommands;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一组关闭命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Command[] offCommands;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Command undoCommand;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteControl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line">        <span class="keyword">this</span>.offCommands = <span class="keyword">new</span> Command[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 预先设置无命令的Command</span></span><br><span class="line">        Command noCommand = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.onCommands[i] = noCommand;</span><br><span class="line">            <span class="keyword">this</span>.offCommands[i] = noCommand;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.undoCommand = noCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定插槽设置开和关命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> slot</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> onCommand</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> offCommand</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> slot, Command onCommand, Command offCommand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot] = onCommand;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.onCommands[slot].execute();</span><br><span class="line">        <span class="keyword">this</span>.undoCommand = onCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> slot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offCommands[slot].execute();</span><br><span class="line">        <span class="keyword">this</span>.undoCommand = offCommands[slot];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.undoCommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        buffer.append(<span class="string">&quot;\n------- Remote Control-------\n&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.onCommands.length; i++) &#123;</span><br><span class="line">            buffer.append(<span class="string">&quot;[slot &quot;</span>)</span><br><span class="line">                    .append(i)</span><br><span class="line">                    .append(<span class="string">&quot; ]&quot;</span>)</span><br><span class="line">                    .append(<span class="keyword">this</span>.onCommands[i].getClass().getName())</span><br><span class="line">                    .append(<span class="string">&quot;    &quot;</span>)</span><br><span class="line">                    .append(<span class="keyword">this</span>.offCommands[i].getClass().getName())</span><br><span class="line">                    .append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现其他命令"><a href="#实现其他命令" class="headerlink" title="实现其他命令"></a>实现其他命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打开电灯的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:43:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭电灯的命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 20:43:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 音响类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 21:09:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stereo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stereo</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s stereo is on\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s stereo is off\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCD</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s stereo is et for CD input\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVolume</span><span class="params">(<span class="keyword">int</span> volume)</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;%s stereo volume se to 11\n&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 音响命令对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 21:09:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StereoOnWithCDCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stereo stereo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StereoOnWithCDCommand</span><span class="params">(Stereo stereo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stereo = stereo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stereo.on();</span><br><span class="line">        stereo.setCD();</span><br><span class="line">        stereo.setVolume(<span class="number">11</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stereo.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 音响命令对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 21:09:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StereoOffWithCDCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Stereo stereo;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StereoOffWithCDCommand</span><span class="params">(Stereo stereo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stereo = stereo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stereo.off();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stereo.on();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试我们的遥控器"><a href="#测试我们的遥控器" class="headerlink" title="测试我们的遥控器"></a>测试我们的遥控器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteLoader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RemoteControl remoteControl = <span class="keyword">new</span> RemoteControl();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将所有装置创建在合适的位置</span></span><br><span class="line">        Light livingRoomLight = <span class="keyword">new</span> Light(<span class="string">&quot;Living Room&quot;</span>);</span><br><span class="line">        Light kitchenLight = <span class="keyword">new</span> Light(<span class="string">&quot;Kitchen&quot;</span>);</span><br><span class="line">        Stereo stereo = <span class="keyword">new</span> Stereo(<span class="string">&quot;Living Room&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建所有电灯命令对象</span></span><br><span class="line">        LightOnCommand livingRoomLightOn = <span class="keyword">new</span> LightOnCommand(livingRoomLight);</span><br><span class="line">        LightOnCommand kitchenLightLightOn = <span class="keyword">new</span> LightOnCommand(kitchenLight);</span><br><span class="line">        LightOffCommand livingRoomLightOff = <span class="keyword">new</span> LightOffCommand(livingRoomLight);</span><br><span class="line">        LightOffCommand kitchenLightLightOff = <span class="keyword">new</span> LightOffCommand(kitchenLight);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建音响的开与关命令</span></span><br><span class="line">        StereoOnWithCDCommand stereoOnWithCD = <span class="keyword">new</span> StereoOnWithCDCommand(stereo);</span><br><span class="line">        StereoOffWithCDCommand stereoOffWithCD = <span class="keyword">new</span> StereoOffWithCDCommand(stereo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将各命令装置在指定的插槽</span></span><br><span class="line">        remoteControl.setCommand(<span class="number">0</span>, livingRoomLightOn, livingRoomLightOff);</span><br><span class="line">        remoteControl.setCommand(<span class="number">1</span>, kitchenLightLightOn, kitchenLightLightOff);</span><br><span class="line">        remoteControl.setCommand(<span class="number">2</span>, stereoOnWithCD, stereoOffWithCD);</span><br><span class="line">        System.out.println(remoteControl);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行遥控器的按钮</span></span><br><span class="line">        remoteControl.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteControl.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        remoteControl.undoButtonWasPushed();</span><br><span class="line"></span><br><span class="line">        remoteControl.onButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        remoteControl.offButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        remoteControl.undoButtonWasPushed();</span><br><span class="line"></span><br><span class="line">        remoteControl.onButtonWasPushed(<span class="number">2</span>);</span><br><span class="line">        remoteControl.offButtonWasPushed(<span class="number">2</span>);</span><br><span class="line">        remoteControl.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用宏命令"><a href="#使用宏命令" class="headerlink" title="使用宏命令"></a>使用宏命令</h3><p>每个遥控器都应该具备“Party模式”</p><ul><li>先创建想要进入宏的命令集合：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建所有的装置，电灯、电视、音响和热水器</span></span><br><span class="line">Light light = <span class="keyword">new</span> Light(<span class="string">&quot;Living Room&quot;</span>);</span><br><span class="line">TV tv = <span class="keyword">new</span> TV(<span class="string">&quot;Living Room&quot;</span>);</span><br><span class="line">Stereo stereo = <span class="keyword">new</span> Stereo(<span class="string">&quot;Living Room&quot;</span>);</span><br><span class="line">Hottub hottub = <span class="keyword">new</span> Hottub();</span><br><span class="line"><span class="comment">// 创建所有的On来控制它们</span></span><br><span class="line">LightOnCommand lightOn = <span class="keyword">new</span> LightOnCommand(light);</span><br><span class="line">StereoOnCommand sterenOn = <span class="keyword">new</span> StereoOnCommand(stereo);</span><br><span class="line">TVOnCommand tvOn = <span class="keyword">new</span> TVOnCommand(tv);</span><br><span class="line">HottubOnCommand hottubOn = <span class="keyword">new</span> HottubOnCommand(hottub);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建所有的off来控制它们</span></span><br><span class="line">LightOffCommand lightOff = <span class="keyword">new</span> LightOffCommand(light);</span><br><span class="line">StereoOffCommand sterenOff = <span class="keyword">new</span> StereoOffCommand(stereo);</span><br><span class="line">TVOffCommand tvOff = <span class="keyword">new</span> TVOnCffmmand(tv);</span><br><span class="line">HottubOffCommand hottubOff = <span class="keyword">new</span> HottubOnCffmmand(hottub);</span><br></pre></td></tr></table></figure><ul><li>接下来创建两个数组，其中记录开启命令，另一个记录关闭命令，并在数组内放入对应的命令</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宏命令，一组命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-16 21:45:21</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Command[] commands;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MacroCommand</span><span class="params">(Command[] commands)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.commands = commands;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command command : commands) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command command : commands) &#123;</span><br><span class="line">            command.undo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组用来记录开启命令，另一个数组用来记录关闭命令</span></span><br><span class="line">Command[] partyOn = &#123; lightOn, stereoOn, tvOn, hottubOn &#125;;</span><br><span class="line">Command[] partyOff = &#123; lightOff, sterenOff, tvOff, hottubOff &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建对应的宏持有它们</span></span><br><span class="line">MacroCommand partyOnMacro = <span class="keyword">new</span> MacroCommand(partyOn);</span><br><span class="line">MacroCommand partyOffMacro = <span class="keyword">new</span> MacroCommand(partyOff);</span><br></pre></td></tr></table></figure><ul><li>然后将宏命令指定给我们所希望的按钮：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将宏命令指定给一个按钮</span></span><br><span class="line">remoteControl.setCommand(<span class="number">4</span>, partyOnMacro, partyOffMacro);</span><br></pre></td></tr></table></figure><ul><li>最后，只需按下一些按钮，测试即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(remoteControl);</span><br><span class="line">System.out.println(<span class="string">&quot;--- Pushing Macro On ---&quot;</span>);</span><br><span class="line">remoteControl.onButtonWasPushed(<span class="number">4</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;--- Pushing Macro Off ---&quot;</span>);</span><br><span class="line">remoteControl.offButtonWasPushed(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>命令模式将发出请求的对象和执行请求的对象解耦</li><li>在被解耦的两者之间是通过命令对象进行沟通的。命令对象封装了接收者和一个或一组动作</li><li>调用者通过命令对象的execute()发出请求，这会使得接收者的动作被调用</li><li>调用者可以接受命令当做参数，甚至在运行时动态地进行</li><li>命令可以支持撤销，做法是实现一个undo()方法来回到execute()被执行的状态</li><li>宏命令是命令的一种简单的延伸，允许调用多个命令。宏方法也可以支持撤销</li><li>实际操作时，很常见使用“聪明”命令对象，也就是直接实现了请求，而不是将工作委托给接收者</li><li>命令也可以用来实习日志和事务系统</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之命令模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之命令模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之命令模式&quot;&gt;&lt;/a&gt;每天一个设计模式之命令模式&lt;/h2&gt;&lt;h3 id=&quot;第一个命令对象&quot;&gt;&lt;a href=&quot;#第一个命令对象&quot; class=&quot;headerlink&quot; title=&quot;第一个命令对象&quot;&gt;&lt;/a&gt;第一个命令对象&lt;/h3&gt;&lt;p&gt;实现命令接口&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="命令模式" scheme="https://chivalry727.github.io/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring 事务</title>
    <link href="https://chivalry727.github.io/Spring%20%E4%BA%8B%E5%8A%A1/"/>
    <id>https://chivalry727.github.io/Spring%20%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-08-15T14:06:17.000Z</published>
    <updated>2020-08-15T14:11:53.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring  事务"></a>Spring  事务</h2><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><ul><li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li><li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li><li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li></ul><a id="more"></a><h3 id="Spring事务的配置方式"><a href="#Spring事务的配置方式" class="headerlink" title="Spring事务的配置方式"></a>Spring事务的配置方式</h3><p>Spring支持编程式事务管理以及声明式事务管理两种方式。</p><h4 id="编程式事务管理"><a href="#编程式事务管理" class="headerlink" title="编程式事务管理"></a>编程式事务管理</h4><p>编程式事务管理是侵入性事务管理，使用<code>TransactionTemplate</code>或者直接使用<code>PlatformTransactionManager</code>，对于编程式事务管理，Spring推荐使用<code>TransactionTemplate</code>。</p><h4 id="声明式事务管理"><a href="#声明式事务管理" class="headerlink" title="声明式事务管理"></a>声明式事务管理</h4><p>声明式事务管理建立在AOP之上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。<br>编程式事务每次实现都要单独实现，但业务量大功能复杂时，使用编程式事务无疑是痛苦的，而声明式事务不同，声明式事务属于无侵入式，不会影响业务逻辑的实现，只需要在配置文件中做相关的事务规则声明或者通过注解的方式，便可以将事务规则应用到业务逻辑中。<br>显然声明式事务管理要优于编程式事务管理，这正是Spring倡导的非侵入式的编程方式。唯一不足的地方就是声明式事务管理的粒度是方法级别，而编程式事务管理是可以到代码块的，但是可以通过提取方法的方式完成声明式事务管理的配置。</p><h3 id="事务的传播机制"><a href="#事务的传播机制" class="headerlink" title="事务的传播机制"></a>事务的传播机制</h3><p>事务的传播性一般用在事务嵌套的场景，比如一个事务方法里面调用了另外一个事务方法，那么两个方法是各自作为独立的方法提交还是内层的事务合并到外层的事务一起提交，这就是需要事务传播机制的配置来确定怎么样执行。<br>常用的事务传播机制如下：</p><ul><li><code>PROPAGATION_REQUIRED</code><br>Spring默认的传播机制，能满足绝大部分业务需求，如果外层有事务，则当前事务加入到外层事务，一块提交，一块回滚。如果外层没有事务，新建一个事务执行</li><li><code>PROPAGATION_REQUES_NEW</code><br>该事务传播机制是每次都会新开启一个事务，同时把外层事务挂起，当当前事务执行完毕，恢复上层事务的执行。如果外层没有事务，执行当前新开启的事务即可</li><li><code>PROPAGATION_SUPPORT</code><br>如果外层有事务，则加入外层事务，如果外层没有事务，则直接使用非事务方式执行。完全依赖外层的事务</li><li><code>PROPAGATION_NOT_SUPPORT</code><br>该传播机制不支持事务，如果外层存在事务则挂起，执行完当前代码，则恢复外层事务，无论是否异常都不会回滚当前的代码</li><li><code> PROPAGATION_NEVER</code><br> 该传播机制不支持外层事务，即如果外层有事务就抛出异常</li><li><code> PROPAGATION_MANDATORY</code><br> 与NEVER相反，如果外层没有事务，则抛出异常</li><li><code>PROPAGATION_NESTED</code><br>该传播机制的特点是可以保存状态保存点，当前事务回滚到某一个点，从而避免所有的嵌套事务都回滚，即各自回滚各自的，如果子事务没有把异常吃掉，基本还是会引起全部回滚的。</li></ul><blockquote><p>传播规则回答了这样一个问题：一个新的事务应该被启动还是被挂起，或者是一个方法是否应该在事务性上下文中运行。</p></blockquote><h3 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h3><p>事务的隔离级别定义一个事务可能受其他并发务活动活动影响的程度，可以把事务的隔离级别想象为这个事务对于事物处理数据的自私程度。</p><p>在一个典型的应用程序中，多个事务同时运行，经常会为了完成他们的工作而操作同一个数据。并发虽然是必需的，但是会导致以下问题：</p><ol><li>脏读（Dirty read）<br>脏读发生在一个事务读取了被另一个事务改写但尚未提交的数据时。如果这些改变在稍后被回滚了，那么第一个事务读取的数据就会是无效的。</li><li>不可重复读（Nonrepeatable read）<br>不可重复读发生在一个事务执行相同的查询两次或两次以上，但每次查询结果都不相同时。这通常是由于另一个并发事务在两次查询之间更新了数据。</li></ol><blockquote><p>不可重复读重点在修改。</p></blockquote><ol><li>幻读（Phantom reads）<br>幻读和不可重复读相似。当一个事务（T1）读取几行记录后，另一个并发事务（T2）插入了一些记录时，幻读就发生了。在后来的查询中，第一个事务（T1）就会发现一些原来没有的额外记录。</li></ol><blockquote><p>幻读重点在新增或删除。</p></blockquote><p>在理想状态下，事务之间将完全隔离，从而可以防止这些问题发生。然而，完全隔离会影响性能，因为隔离经常涉及到锁定在数据库中的记录（甚至有时是锁表）。完全隔离要求事务相互等待来完成工作，会阻碍并发。因此，可以根据业务场景选择不同的隔离级别。</p><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>允许读取尚未提交的更改。可能导致脏读、幻读或不可重复读。</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>（Oracle 默认级别）允许从已经提交的并发事务读取。可防止脏读，但幻读和不可重复读仍可能会发生。</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>（MYSQL默认级别）对相同字段的多次读取的结果是一致的，除非数据被当前事务本身改变。可防止脏读和不可重复读，但幻读仍可能发生。</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>完全服从ACID的隔离级别，确保不发生脏读、不可重复读和幻影读。这在所有隔离级别中也是最慢的，因为它通常是通过完全锁定当前事务所涉及的数据表来完成的。</td></tr></tbody></table><h3 id="只读"><a href="#只读" class="headerlink" title="只读"></a>只读</h3><p>如果一个事务只对数据库执行读操作，那么该数据库就可能利用那个事务的只读特性，采取某些优化措施。通过把一个事务声明为只读，可以给后端数据库一个机会来应用那些它认为合适的优化措施。由于只读的优化措施是在一个事务启动时由后端数据库实施的， 因此，只有对于那些具有可能启动一个新事务的传播行为（PROPAGATION_REQUIRES_NEW、PROPAGATION_REQUIRED、 ROPAGATION_NESTED）的方法来说，将事务声明为只读才有意义。</p><h3 id="事务超时"><a href="#事务超时" class="headerlink" title="事务超时"></a>事务超时</h3><p>为了使一个应用程序很好地执行，它的事务不能运行太长时间。因此，声明式事务的下一个特性就是它的超时。</p><p>假设事务的运行时间变得格外的长，由于事务可能涉及对数据库的锁定，所以长时间运行的事务会不必要地占用数据库资源。这时就可以声明一个事务在特定秒数后自动回滚，不必等它自己结束。</p><p>由于超时时钟在一个事务启动的时候开始的，因此，只有对于那些具有可能启动一个新事务的传播行为（PROPAGATION_REQUIRES_NEW、PROPAGATION_REQUIRED、ROPAGATION_NESTED）的方法来说，声明事务超时才有意义。</p><h3 id="回滚规则"><a href="#回滚规则" class="headerlink" title="回滚规则"></a>回滚规则</h3><p>在默认设置下，事务只在出现运行时异常（runtime exception）时回滚，而在出现受检查异常（checked exception）时不回滚（这一行为和EJB中的回滚行为是一致的）。<br>不过，可以声明在出现特定受检查异常时像运行时异常一样回滚。同样，也可以声明一个事务在出现特定的异常时不回滚，即使特定的异常是运行时异常。</p><h3 id="Spring声明式事务配置参考"><a href="#Spring声明式事务配置参考" class="headerlink" title="Spring声明式事务配置参考"></a>Spring声明式事务配置参考</h3><p>事物配置中有哪些属性可以配置?以下只是简单的使用参考</p><ol><li>事务的传播性：<br><code>@Transactional(propagation=Propagation.REQUIRED)</code></li><li>事务的隔离级别：<br><code>@Transactional(isolation = Isolation.READ_UNCOMMITTED)</code></li></ol><blockquote><p>读取未提交数据(会出现脏读, 不可重复读) 基本不使用</p></blockquote><ol><li>只读：<br><code>@Transactional(readOnly=true)</code><br>该属性用于设置当前事务是否为只读事务，设置为true表示只读，false则表示可读写，默认值为false。</li><li>事务的超时性：<br><code>@Transactional(timeout=30)</code></li><li>回滚：<br>指定单一异常类：<code>@Transactional(rollbackFor=RuntimeException.class)</code><br>指定多个异常类：<code>@Transactional(rollbackFor=&#123;RuntimeException.class, Exception.class&#125;)</code></li></ol><blockquote><p>该属性用于设置需要进行回滚的异常类数组，当方法中抛出指定异常数组中的异常时，则进行事务回滚。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-事务&quot;&gt;&lt;a href=&quot;#Spring-事务&quot; class=&quot;headerlink&quot; title=&quot;Spring  事务&quot;&gt;&lt;/a&gt;Spring  事务&lt;/h2&gt;&lt;h3 id=&quot;事务的特性&quot;&gt;&lt;a href=&quot;#事务的特性&quot; class=&quot;headerlink&quot; title=&quot;事务的特性&quot;&gt;&lt;/a&gt;事务的特性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。&lt;/li&gt;
&lt;li&gt;持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Spring 技术" scheme="https://chivalry727.github.io/categories/Spring-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Spring 事务" scheme="https://chivalry727.github.io/tags/Spring-%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之单例模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-15T13:09:35.000Z</published>
    <updated>2020-08-15T14:01:26.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之单例模式"><a href="#每天一个设计模式之单例模式" class="headerlink" title="每天一个设计模式之单例模式"></a>每天一个设计模式之单例模式</h2><h3 id="经典的延迟实例化（懒加载）的单例模式实现"><a href="#经典的延迟实例化（懒加载）的单例模式实现" class="headerlink" title="经典的延迟实例化（懒加载）的单例模式实现"></a>经典的延迟实例化（懒加载）的单例模式实现</h3><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 经典的单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 21:17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义单例模式"><a href="#定义单例模式" class="headerlink" title="定义单例模式"></a>定义单例模式</h3><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。</p><h3 id="多线程下，经典的实现就不一定是唯一实例，通过加锁保证唯一实例"><a href="#多线程下，经典的实现就不一定是唯一实例，通过加锁保证唯一实例" class="headerlink" title="多线程下，经典的实现就不一定是唯一实例，通过加锁保证唯一实例"></a>多线程下，经典的实现就不一定是唯一实例，通过加锁保证唯一实例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程下安全的经典的单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 21:17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不延迟实例化的单例模式"><a href="#不延迟实例化的单例模式" class="headerlink" title="不延迟实例化的单例模式"></a>不延迟实例化的单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不延迟实例化的单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 21:17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">// JVM在加载这个类的时候，就会创建此实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用双重检查的单例模式"><a href="#使用双重检查的单例模式" class="headerlink" title="使用双重检查的单例模式"></a>使用双重检查的单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查的单例模式，使用volatile保证多线程之间实例初始化后保持可见</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 21:17:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>单例模式确保程序中一个类最多只有一个实例</li><li>单例模式也提供访问这个实例的全局点</li><li>在Java中实现单例模式需要私有的构造器、一个静态方法和一个静态变量</li><li>确定在性能和资源上的限制，然后小心地选择适当的方案来实现单例，以解决多线程的安全问题</li><li>注意：如果使用多个类加载器，可能会导致单例失效而产生多个实例</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之单例模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之单例模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之单例模式&quot;&gt;&lt;/a&gt;每天一个设计模式之单例模式&lt;/h2&gt;&lt;h3 id=&quot;经典的延迟实例化（懒加载）的单例模式实现&quot;&gt;&lt;a href=&quot;#经典的延迟实例化（懒加载）的单例模式实现&quot; class=&quot;headerlink&quot; title=&quot;经典的延迟实例化（懒加载）的单例模式实现&quot;&gt;&lt;/a&gt;经典的延迟实例化（懒加载）的单例模式实现&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="https://chivalry727.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之工厂模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-14T13:17:55.000Z</published>
    <updated>2020-08-15T03:06:22.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之工厂模式"><a href="#每天一个设计模式之工厂模式" class="headerlink" title="每天一个设计模式之工厂模式"></a>每天一个设计模式之工厂模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><h4 id="初识需要变化的方面"><a href="#初识需要变化的方面" class="headerlink" title="初识需要变化的方面"></a>初识需要变化的方面</h4><p>假如你有一个比萨店，身为比萨店的主人，你的代码可能会这么写：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通比萨</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 21:39:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作比萨</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Pizza <span class="title">orderPizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">new</span> Pizza();</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Packed Pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cut Pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烘烤比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake Pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Prepare Pizza&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="假如你需要更多的比萨类型"><a href="#假如你需要更多的比萨类型" class="headerlink" title="假如你需要更多的比萨类型"></a>假如你需要更多的比萨类型</h4><p>所以需要增加一些代码，来决定适合的比萨类型，然后再制作比萨：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 根据不同的类型，创建不同的实例对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;greek&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pepperoni&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125;</span><br><span class="line">    pizza.prepare();</span><br><span class="line">    pizza.bake();</span><br><span class="line">    pizza.cut();</span><br><span class="line">    pizza.box();</span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="如果需要增加更多的类型比萨"><a href="#如果需要增加更多的类型比萨" class="headerlink" title="如果需要增加更多的类型比萨"></a>如果需要增加更多的类型比萨</h4><p>此时，如果我们需要增加更多可口的比萨呢，就需要在代码中重新增加类型，随着时间的变化，类型会不断的改变，这无疑是个灾难。</p><p>这个时候，该是用封装的时候了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 根据不同的类型，创建不同的实例对象</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;greek&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pepperoni&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;clam&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;veggie&quot;</span>.equals(type)) &#123;</span><br><span class="line">       pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ... 省略制作过程</span></span><br><span class="line">    <span class="keyword">return</span> pizza;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="建立一个简单比萨工厂"><a href="#建立一个简单比萨工厂" class="headerlink" title="建立一个简单比萨工厂"></a>建立一个简单比萨工厂</h4><p>先从工厂本身开始，我们要为所有比萨封装创建对象的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的比萨工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 22:05:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 根据不同的类型，创建不同的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;greek&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pepperoni&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;clam&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;veggie&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计比萨店类"><a href="#设计比萨店类" class="headerlink" title="设计比萨店类"></a>设计比萨店类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比萨店</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 21:39:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SimplePizzaFactory simplePizzaFactory;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory simplePizzaFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simplePizzaFactory = simplePizzaFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 制作比萨</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = simplePizzaFactory.createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 其他方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="让我们来定义简单工厂"><a href="#让我们来定义简单工厂" class="headerlink" title="让我们来定义简单工厂"></a>让我们来定义简单工厂</h4><p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。</p><h4 id="简单工厂模式类图"><a href="#简单工厂模式类图" class="headerlink" title="简单工厂模式类图"></a>简单工厂模式类图</h4><p><img src="http://wx1.sinaimg.cn/large/008aQ1h9ly1ghqp8y74saj30qc0gcwlw.jpg"></p><h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><h4 id="加盟比萨店"><a href="#加盟比萨店" class="headerlink" title="加盟比萨店"></a>加盟比萨店</h4><p>因为我们的比萨店经营有成，现在很多人想加盟我们的比萨店。但是不同区域是有差异的， 比如：纽约、芝加哥、加州等各地的加盟店之间口味也有差异。</p><h4 id="改造我们的比萨店"><a href="#改造我们的比萨店" class="headerlink" title="改造我们的比萨店"></a>改造我们的比萨店</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们的比萨店</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 22:20:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 订购比萨</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义抽象的制作比萨方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在已经有一个<code>PizzaStore</code>作为超类，让每个区域加盟比萨店（<code>NewYorkPizzaStore、ChicagoPizzaStore</code>）都继承这个<code>PizzaStore</code>，每个子类各自决定如何制造比萨。</p><h4 id="让我们开一家纽约风味的比萨店吧"><a href="#让我们开一家纽约风味的比萨店吧" class="headerlink" title="让我们开一家纽约风味的比萨店吧"></a>让我们开一家纽约风味的比萨店吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 纽约风味的比萨店</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 22:18:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewYorkPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 根据不同的类型，创建不同的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NewYorkStyleCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pepperoni&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NewYorkStylePepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;clam&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NewYorkStyleClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;veggie&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> NewYorkStyleVeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="让我们再开一家芝加哥风味的比萨店吧"><a href="#让我们再开一家芝加哥风味的比萨店吧" class="headerlink" title="让我们再开一家芝加哥风味的比萨店吧"></a>让我们再开一家芝加哥风味的比萨店吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 芝加哥风味的比萨店</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 22:18:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 根据不同的类型，创建不同的实例对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;pepperoni&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ChicagoStylePepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;clam&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ChicagoStyleClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;veggie&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ChicagoStyleVeggiePizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改造我们的比萨吧"><a href="#改造我们的比萨吧" class="headerlink" title="改造我们的比萨吧"></a>改造我们的比萨吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通比萨</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 21:39:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> String dough;</span><br><span class="line">    <span class="keyword">protected</span> String sauce;</span><br><span class="line">    <span class="keyword">protected</span> ArrayList&lt;String&gt; toppings = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cut the pizza into diagonal slices&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烘烤比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 准备比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Prepare &quot;</span> + name +<span class="string">&quot; Pizza&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Tossing dough...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding sauce...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Adding toppings: &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; toppings.size(); i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;   &quot;</span> + toppings.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计纽约风味的比萨"><a href="#设计纽约风味的比萨" class="headerlink" title="设计纽约风味的比萨"></a>设计纽约风味的比萨</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略其他纽约风味的口味比萨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewYorkStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NewYorkStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.name = <span class="string">&quot;New York Style Sauce and Cheese Pizza&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.dough = <span class="string">&quot;Thin Crust Dough&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.sauce = <span class="string">&quot;Marinara Sauce&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.toppings.add(<span class="string">&quot;Grated Reggiano Cheese&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设计芝加哥风味的比萨"><a href="#设计芝加哥风味的比萨" class="headerlink" title="设计芝加哥风味的比萨"></a>设计芝加哥风味的比萨</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略其他芝加哥风味的口味比萨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoStyleCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChicagoStyleCheesePizza</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.name = <span class="string">&quot;Chicago Style Deep Dish Cheese Pizza&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.dough = <span class="string">&quot;Extra Thick Crust Dough&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.sauce = <span class="string">&quot;Plum Tomato Sauce&quot;</span>;</span><br><span class="line">        <span class="keyword">super</span>.toppings.add(<span class="string">&quot;Shredded Mozzarella Cheese&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 将芝加哥风味比萨切成正方形</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cutting the pizza into square slices&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="久等了，让我们来制作比萨吧"><a href="#久等了，让我们来制作比萨吧" class="headerlink" title="久等了，让我们来制作比萨吧"></a>久等了，让我们来制作比萨吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaTestDrive</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建纽约风味的比萨店</span></span><br><span class="line">        PizzaStore nyStore = <span class="keyword">new</span> NewYorkPizzaStore();</span><br><span class="line">        <span class="comment">// 创建芝加哥风味的比萨店</span></span><br><span class="line">        PizzaStore chicagoStore = <span class="keyword">new</span> ChicagoPizzaStore();</span><br><span class="line"></span><br><span class="line">        Pizza pizza = nyStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Ethan ordered a &quot;</span> + pizza.getName() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pizza = chicagoStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Joel ordered a &quot;</span> + pizza.getName() + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="认识工厂方法模式的时刻到了"><a href="#认识工厂方法模式的时刻到了" class="headerlink" title="认识工厂方法模式的时刻到了"></a>认识工厂方法模式的时刻到了</h4><p>所有工厂模式都用来封装对象的创建。工厂方法模式（<code>Factory Method Pattern</code>）通过让子类来决定该创建的对象是什么，来达到将对象创建的过程封装的目的。</p><h4 id="工厂方法模式类图"><a href="#工厂方法模式类图" class="headerlink" title="工厂方法模式类图"></a>工厂方法模式类图</h4><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghqr9jwgpyj30wc0jkjzr.jpg"></p><h4 id="定义工厂方法模式"><a href="#定义工厂方法模式" class="headerlink" title="定义工厂方法模式"></a>定义工厂方法模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 抽象工厂模式</span><br><span class="line"></span><br><span class="line">#### 设计原则</span><br><span class="line"></span><br><span class="line">要依赖对象，不要依赖具体类</span><br><span class="line"></span><br><span class="line">#### 依赖倒置原则</span><br><span class="line"></span><br><span class="line">下面的指导方针，能帮助我们避免在OO设计中违反依赖倒置原则：</span><br><span class="line"></span><br><span class="line">- 变量不可以持有具体类的引用</span><br><span class="line">- 不要让类派生自具体类</span><br><span class="line">- 不要覆盖基类中已实现的方法</span><br><span class="line"></span><br><span class="line">#### 重新建造原料工厂</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 建造原料工厂</span><br><span class="line"> * @author Mr.zxb</span><br><span class="line"> * @date 2020-08-15 10:05:27</span><br><span class="line"> *&#x2F;</span><br><span class="line">public interface PizzaIngredientFactory &#123;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建面团</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Dough createDough();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建酱汁</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Sauce createSauce();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建奶酪</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Cheese createCheese();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *创建蔬菜</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Veggies[] createVeggies();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *创建意大利辣香肠</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Peppernoi createPepperoni();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 创建蛤蜊</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Clams createClam();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建纽约原料工厂"><a href="#创建纽约原料工厂" class="headerlink" title="创建纽约原料工厂"></a>创建纽约原料工厂</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 纽约比萨配料厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 10:11:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewYorkPizzaIngredientFactory</span> <span class="keyword">implements</span> <span class="title">PizzaIngredientFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dough <span class="title">createDough</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThinCrustDough();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Sauce <span class="title">createSauce</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarinaraSauce();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cheese <span class="title">createCheese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReggianoCheese();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Veggies[] createVeggies() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Veggies[]&#123; <span class="keyword">new</span> Garlic(), <span class="keyword">new</span> Onion(), <span class="keyword">new</span> Mushroom(), <span class="keyword">new</span> RedPepper() &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Peppernoi <span class="title">createPepperoni</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SlicedPeppernoi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Clams <span class="title">createClam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FreshClams();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重做比萨···-···"><a href="#重做比萨···-···" class="headerlink" title="重做比萨··· ···"></a>重做比萨··· ···</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比萨抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 10:28:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Dough dough;</span><br><span class="line">    <span class="keyword">protected</span> Sauce sauce;</span><br><span class="line">    <span class="keyword">protected</span> Veggies[] veggies;</span><br><span class="line">    <span class="keyword">protected</span> Cheese cheese;</span><br><span class="line">    <span class="keyword">protected</span> Peppernoi peppernoi;</span><br><span class="line">    <span class="keyword">protected</span> Clams clams;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打包比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Place pizza in official PizzaStore box&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cut the pizza into diagonal slices&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 烘烤比萨</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bake for 25 minutes at 350&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Pizza&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, dough=&quot;</span> + dough +</span><br><span class="line">                <span class="string">&quot;, sauce=&quot;</span> + sauce +</span><br><span class="line">                <span class="string">&quot;, veggies=&quot;</span> + Arrays.toString(veggies) +</span><br><span class="line">                <span class="string">&quot;, cheese=&quot;</span> + cheese +</span><br><span class="line">                <span class="string">&quot;, peppernoi=&quot;</span> + peppernoi +</span><br><span class="line">                <span class="string">&quot;, clams=&quot;</span> + clams +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 芝士披萨</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 10:31:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CheesePizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Preparing &quot;</span> + name);</span><br><span class="line">        <span class="keyword">super</span>.dough = ingredientFactory.createDough();</span><br><span class="line">        <span class="keyword">super</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line">        <span class="keyword">super</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">        <span class="keyword">super</span>.veggies = ingredientFactory.createVeggies();</span><br><span class="line">        <span class="keyword">super</span>.clams = ingredientFactory.createClam();</span><br><span class="line">        <span class="keyword">super</span>.peppernoi = ingredientFactory.createPepperoni();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 蛤蜊比萨</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 10:31:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClamPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PizzaIngredientFactory ingredientFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClamPizza</span><span class="params">(PizzaIngredientFactory ingredientFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ingredientFactory = ingredientFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Preparing &quot;</span> + name);</span><br><span class="line">        <span class="keyword">super</span>.dough = ingredientFactory.createDough();</span><br><span class="line">        <span class="keyword">super</span>.sauce = ingredientFactory.createSauce();</span><br><span class="line">        <span class="keyword">super</span>.cheese = ingredientFactory.createCheese();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="再回到比萨店"><a href="#再回到比萨店" class="headerlink" title="再回到比萨店"></a>再回到比萨店</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比萨店</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-14 22:20:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = createPizza(type);</span><br><span class="line">        pizza.prepare();</span><br><span class="line">        pizza.bake();</span><br><span class="line">        pizza.cut();</span><br><span class="line">        pizza.box();</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 纽约风味比萨店</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-15 10:33:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewYorkPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        PizzaIngredientFactory ingredientFactory = <span class="keyword">new</span> NewYorkPizzaIngredientFactory();</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;cheese&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">&quot;New York Style Cheese Pizza&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;clam&quot;</span>.equals(type)) &#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> ClamPizza(ingredientFactory);</span><br><span class="line">            pizza.setName(<span class="string">&quot;New York Style Clam Pizza&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ... 其他口味方法</span></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="让我们来制作新的比萨吧"><a href="#让我们来制作新的比萨吧" class="headerlink" title="让我们来制作新的比萨吧"></a>让我们来制作新的比萨吧</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStoreTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建纽约风味比萨店</span></span><br><span class="line">        PizzaStore nyPizzaStore = <span class="keyword">new</span> NewYorkPizzaStore();</span><br><span class="line">        <span class="comment">// 制作芝士比萨</span></span><br><span class="line">        Pizza pizza = nyPizzaStore.orderPizza(<span class="string">&quot;cheese&quot;</span>);</span><br><span class="line">        System.out.println(pizza);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义抽象工厂模式"><a href="#定义抽象工厂模式" class="headerlink" title="定义抽象工厂模式"></a>定义抽象工厂模式</h4><p>抽象工厂模式：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类。</p><p>抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产出的具体产品是什么。这样一来，客户就从具体的产品中解耦。</p><h4 id="抽象工厂模式类图"><a href="#抽象工厂模式类图" class="headerlink" title="抽象工厂模式类图"></a>抽象工厂模式类图</h4><p><img src="http://wx3.sinaimg.cn/large/008aQ1h9ly1ghrbcpywyej30qx0kpdp6.jpg"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>所有的工厂都是用来封装对象的创建</li><li>简单工厂，虽然不是真正的设计模式，但仍不失为一个简单的方法，可以将客户程序从具体类解耦</li><li>工厂方法使用继承：把对象的创建委托给子类，子类实现工厂方法来创建对象</li><li>抽象工厂使用对象组合：对象的创建被实现在工厂接口所暴露出来的方法中</li><li>所有工厂模式都通过减少应用程序和具体类之间的依赖促进松耦合</li><li>工厂方法允许类将实例化延迟到子类进行</li><li>抽象工厂创建相关的对象家族，而不需要依赖它们的具体类</li><li>依赖倒置原则，指导我们避免依赖具体类型，而尽量依赖抽象</li><li>工厂是很有威力的技巧，帮助我们针对抽象编程，而不要针对具体类的编程</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之工厂模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之工厂模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之工厂模式&quot;&gt;&lt;/a&gt;每天一个设计模式之工厂模式&lt;/h2&gt;&lt;h3 id=&quot;简单工厂模式&quot;&gt;&lt;a href=&quot;#简单工厂模式&quot; class=&quot;headerlink&quot; title=&quot;简单工厂模式&quot;&gt;&lt;/a&gt;简单工厂模式&lt;/h3&gt;&lt;h4 id=&quot;初识需要变化的方面&quot;&gt;&lt;a href=&quot;#初识需要变化的方面&quot; class=&quot;headerlink&quot; title=&quot;初识需要变化的方面&quot;&gt;&lt;/a&gt;初识需要变化的方面&lt;/h4&gt;&lt;p&gt;假如你有一个比萨店，身为比萨店的主人，你的代码可能会这么写：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂模式" scheme="https://chivalry727.github.io/tags/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之装饰者模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-13T12:19:44.000Z</published>
    <updated>2020-08-13T14:28:29.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之装饰者模式"><a href="#每天一个设计模式之装饰者模式" class="headerlink" title="每天一个设计模式之装饰者模式"></a>每天一个设计模式之装饰者模式</h2><h3 id="定义装饰者模式"><a href="#定义装饰者模式" class="headerlink" title="定义装饰者模式"></a>定义装饰者模式</h3><p>装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>类应该对扩展开发，对修改关闭</p><a id="more"></a><h3 id="装饰者模式类图"><a href="#装饰者模式类图" class="headerlink" title="装饰者模式类图"></a>装饰者模式类图</h3><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghpiqdpnelj30vs0l1jx2.jpg"></p><h3 id="用装饰者来设计我们的饮料"><a href="#用装饰者来设计我们的饮料" class="headerlink" title="用装饰者来设计我们的饮料"></a>用装饰者来设计我们的饮料</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饮料抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 20:48:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String description = <span class="string">&quot;Unknown Beverage&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取饮料描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> description;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 饮料成本抽象方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调味品装饰器，继承自饮料抽象类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 20:50:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CondimentDecorator</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取调味品描述</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计饮料的对象"><a href="#设计饮料的对象" class="headerlink" title="设计饮料的对象"></a>设计饮料的对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浓咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 20:52:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 浓咖啡描述</span></span><br><span class="line">        <span class="keyword">super</span>.description = <span class="string">&quot;Espresso&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成本</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 20:54:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBlend</span> <span class="keyword">extends</span> <span class="title">Beverage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseBlend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.description = <span class="string">&quot;House Blend Coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.89</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设计调料的对象"><a href="#设计调料的对象" class="headerlink" title="设计调料的对象"></a>设计调料的对象</h3><p>我们已经完成了抽象组件（<code>Beverage</code>），有了具体组件（<code>HouseBlend</code>），也有了抽象装饰者（<code>CondimentDecorator</code>）。现在就来实现具体装饰者。先从摩卡下手：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 摩卡咖啡</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 20:56:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mocha</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1) 用一个实例变量记录饮料，也就是被装饰者。</span></span><br><span class="line"><span class="comment">     * 2) 想办法让装饰者（饮料）被记录到实例变量中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mocha</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取完整的调料描述</span></span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() + <span class="string">&quot;, Mocha&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 首先把调用委托给被装饰对象，以计算价格，然后加上 Mocha的价格，得到最后的结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.20</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 21:26:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Whip</span> <span class="keyword">extends</span> <span class="title">CondimentDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Beverage beverage;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Whip</span><span class="params">(Beverage beverage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beverage = beverage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> + beverage.cost();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beverage.getDescription() +<span class="string">&quot;, Whip&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 21:20:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StarbuzzCoffee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个 Espress，不需要调料，打印价格和描述</span></span><br><span class="line">        Beverage beverage = <span class="keyword">new</span> Espresso();</span><br><span class="line">        System.out.println(beverage.getDescription() + <span class="string">&quot; $&quot;</span> + beverage.cost());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一各 DarkRost对象</span></span><br><span class="line">        Beverage beverage2 = <span class="keyword">new</span> DarkRoast();</span><br><span class="line">        <span class="comment">// 用Mocha 装饰它</span></span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        <span class="comment">// 用第二个Mocha 装饰它</span></span><br><span class="line">        beverage2 = <span class="keyword">new</span> Mocha(beverage2);</span><br><span class="line">        <span class="comment">// 用Whip 装饰它</span></span><br><span class="line">        beverage2 = <span class="keyword">new</span> Whip(beverage2);</span><br><span class="line">        <span class="comment">// 输出价格和描述</span></span><br><span class="line">        System.out.println(beverage2.getDescription() + <span class="string">&quot; $&quot;</span> + beverage2.cost());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="来看看结果"><a href="#来看看结果" class="headerlink" title="来看看结果"></a>来看看结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Espresso $<span class="number">1.99</span></span><br><span class="line">Dark Roast, Mocha, Mocha, Whip $<span class="number">1.79</span></span><br></pre></td></tr></table></figure><h3 id="让我们来看看Java-I-O里的装饰者"><a href="#让我们来看看Java-I-O里的装饰者" class="headerlink" title="让我们来看看Java I/O里的装饰者"></a>让我们来看看Java I/O里的装饰者</h3><h4 id="装饰的-java-io-类"><a href="#装饰的-java-io-类" class="headerlink" title="装饰的 java.io 类"></a>装饰的 java.io 类</h4><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghpj9dhmooj30ue0fjdiz.jpg"></p><h4 id="编写自己的Java-I-O-装饰者"><a href="#编写自己的Java-I-O-装饰者" class="headerlink" title="编写自己的Java I/O 装饰者"></a>编写自己的Java I/O 装饰者</h4><p>编写一个装饰者，把输入流内的所有大写字符转成小写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.decorator.io;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FilterInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将大写转成小写的装饰者对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 22:05:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowerCaseInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &lt;code&gt;FilterInputStream&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * by assigning the  argument &lt;code&gt;in&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * to the field &lt;code&gt;this.in&lt;/code&gt; so as</span></span><br><span class="line"><span class="comment">     * to remember it for later use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in the underlying input stream, or &lt;code&gt;null&lt;/code&gt; if</span></span><br><span class="line"><span class="comment">     *           this instance is to be created without an underlying stream.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">LowerCaseInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(in);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="keyword">super</span>.read();</span><br><span class="line">        <span class="keyword">return</span> c == -<span class="number">1</span> ? c : Character.toLowerCase((<span class="keyword">char</span>) c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="keyword">super</span>.read(b, off, len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = off; i &lt; off + result; i++) &#123;</span><br><span class="line">            b[i] = (<span class="keyword">byte</span>) Character.toLowerCase((<span class="keyword">char</span>) b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试我们新的Java-I-O装饰者"><a href="#测试我们新的Java-I-O装饰者" class="headerlink" title="测试我们新的Java I/O装饰者"></a>测试我们新的Java I/O装饰者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试新的Java I/O 装饰者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-13 22:10:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置输入流 InputStream，先用 BufferedInputStream装饰它，再用我们新的 LowerCaseInputStream过滤器装饰</span></span><br><span class="line">            in = <span class="keyword">new</span> LowerCaseInputStream(<span class="keyword">new</span> BufferedInputStream(System.in));</span><br><span class="line">            <span class="keyword">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = in.read()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print((<span class="keyword">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">运行结果：</span></span><br><span class="line"><span class="attr">HELLO</span></span><br><span class="line"><span class="attr">hello</span></span><br><span class="line"><span class="attr">HI</span></span><br><span class="line"><span class="attr">hi</span></span><br><span class="line"><span class="attr">HELLO</span> <span class="string">WORLD</span></span><br><span class="line"><span class="attr">hello</span> <span class="string">world</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>继承属于扩展形式之一，但不见得达到弹性设计的最佳方式</li><li>在我们的设计中，应该允许行为可以被扩展，而无须修改现有的代码</li><li>组合和委托可用于在运行时动态地加上新的行为</li><li>除了继承，装饰者模式也可以让我们扩展行为</li><li>装饰者模式意味着一群装饰者类，这些类用来包装具体组件</li><li>装饰者类反映出被装饰的组件类型</li><li>装饰者可以在被修饰者的行为前面与/或后面加上自己的行为，甚至将被装饰者的行为整个取代掉，而达到特定的目的</li><li>你可以用无所个装饰者包装一个组件</li><li>装饰者一般对组件的客户是透明的，除非客户程序依赖于组件的具体类型</li><li>装饰者会导致设计中出现许多小装饰对象，如果过度使用，会让程序变得很复杂</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之装饰者模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之装饰者模式&quot;&gt;&lt;/a&gt;每天一个设计模式之装饰者模式&lt;/h2&gt;&lt;h3 id=&quot;定义装饰者模式&quot;&gt;&lt;a href=&quot;#定义装饰者模式&quot; class=&quot;headerlink&quot; title=&quot;定义装饰者模式&quot;&gt;&lt;/a&gt;定义装饰者模式&lt;/h3&gt;&lt;p&gt;装饰者模式动态地将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
&lt;h3 id=&quot;设计原则&quot;&gt;&lt;a href=&quot;#设计原则&quot; class=&quot;headerlink&quot; title=&quot;设计原则&quot;&gt;&lt;/a&gt;设计原则&lt;/h3&gt;&lt;p&gt;类应该对扩展开发，对修改关闭&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="装饰者模式" scheme="https://chivalry727.github.io/tags/%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>gRPC 简单示例</title>
    <link href="https://chivalry727.github.io/gRPC%20%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/"/>
    <id>https://chivalry727.github.io/gRPC%20%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</id>
    <published>2020-08-12T12:27:17.000Z</published>
    <updated>2020-08-20T11:49:45.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gRPC-高性能的RPC框架简单示例"><a href="#gRPC-高性能的RPC框架简单示例" class="headerlink" title="gRPC  高性能的RPC框架简单示例"></a>gRPC  高性能的RPC框架简单示例</h2><h3 id="什么是-gRPC-？"><a href="#什么是-gRPC-？" class="headerlink" title="什么是 gRPC ？"></a>什么是 gRPC ？</h3><p>gRPC由 Google 开发，是一款跨语言、跨平台、开源的远程过程调用的(RPC)高性能框架。</p><a id="more"></a><p>在gRPC中，客户端应用程序可以直接在其他计算机上的服务器应用程序上调用方法，就好像它是本地对象一样，从而使您更轻松地创建分布式应用程序和服务。 与许多RPC系统一样，gRPC围绕定义服务的思想，指定可通过其参数和返回类型远程调用的方法。 在服务器端，服务器实现此接口并运行gRPC服务器以处理客户端调用。 在客户端，客户端具有一个存根（在某些语言中仅称为客户端），提供与服务器相同的方法。</p><h3 id="gRPC-示意图"><a href="#gRPC-示意图" class="headerlink" title="gRPC  示意图"></a>gRPC  示意图</h3><p><img src="http://wx3.sinaimg.cn/large/008aQ1h9ly1ghob5ynbfbj30kl0a2gm5.jpg" alt="image-20200812203844651"></p><p>gRPC 客户端和服务端可以在多种环境中运行和交互 - 从 Google 内部的服务器到你自己的笔记本，并且可以用任何 gRPC <a href="http://doc.oschina.net/grpc?t=58008#quickstart">支持的语言</a>来编写。所以，你可以很容易地用 Java 创建一个 gRPC 服务端，用 Go、Java、Python、Ruby等语言来创建客户端。此外，Google 最新 API 将有 gRPC 版本的接口，使你很容易地将 Google 的功能集成到你的应用里。</p><h3 id="使用-Protocol-buffers"><a href="#使用-Protocol-buffers" class="headerlink" title="使用  Protocol buffers"></a>使用  Protocol buffers</h3><p>gRPC 默认使用 <em>protocol buffers</em>，这是 Google 开源的一套成熟的结构数据序列化机制（当然也可以使用其他数据格式如 JSON）。正如你将在下方例子里所看到的，使用 <em>proto files</em> 创建 gRPC 服务，用 protocol buffers 消息类型来定义方法参数和返回类型。</p><h3 id="开始创建第一个-HelloRpc-proto-文件吧"><a href="#开始创建第一个-HelloRpc-proto-文件吧" class="headerlink" title="开始创建第一个 HelloRpc.proto  文件吧"></a>开始创建第一个 HelloRpc.proto  文件吧</h3><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;com.chivalry.grpc.examples&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;HelloRpc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> examples;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello service</span></span><br><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">HelloRpcService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">rpc</span> sayHello(HelloRpcRequest) <span class="keyword">returns</span> (HelloRpcReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gRPC request</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRpcRequest</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// gRPC response</span></span><br><span class="line"><span class="class"><span class="keyword">message</span> <span class="title">HelloRpcReply</span> </span>&#123;</span><br><span class="line">   <span class="built_in">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Maven-依赖"><a href="#Maven-依赖" class="headerlink" title="Maven  依赖"></a>Maven  依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">grpc.version</span>&gt;</span>1.31.0<span class="tag">&lt;/<span class="name">grpc.version</span>&gt;</span><span class="comment">&lt;!-- CURRENT_GRPC_VERSION --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">protobuf.version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">protobuf.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">protoc.version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">protoc.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;grpc.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.protobuf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-java-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;protobuf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-netty-shaded<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-protobuf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-stub<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>annotations-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.53<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!-- not needed at runtime --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.grpc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>grpc-testing<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.errorprone<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>error_prone_annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- prefer to use 2.3.3 or later --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.28.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>kr.motd.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>os-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- gRPC 提供的生成Java代码的插件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.xolstice.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>protobuf-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">protocArtifact</span>&gt;</span>com.google.protobuf:protoc:$&#123;protoc.version&#125;:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">protocArtifact</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginId</span>&gt;</span>grpc-java<span class="tag">&lt;/<span class="name">pluginId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">pluginArtifact</span>&gt;</span>io.grpc:protoc-gen-grpc-java:$&#123;grpc.version&#125;:exe:$&#123;os.detected.classifier&#125;<span class="tag">&lt;/<span class="name">pluginArtifact</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile-custom<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-enforcer-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>enforce<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">requireUpperBoundDeps</span>/&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成-RPC-Java-代码"><a href="#生成-RPC-Java-代码" class="headerlink" title="生成  RPC  Java 代码"></a>生成  RPC  Java 代码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package</span><br></pre></td></tr></table></figure><p><img src="https://tva4.sinaimg.cn/large/008aQ1h9ly1ghqcyfhe5yj30q80m6jtr.jpg" alt="WX20200814-151102@2x"></p><h3 id="创建-RpcServer-端"><a href="#创建-RpcServer-端" class="headerlink" title="创建  RpcServer  端"></a>创建  RpcServer  端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello Rpc Service examples</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-12 19:54:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRpcServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(HelloRpcServer.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务端监听端口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port = <span class="number">8000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Server server;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloRpcServer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.server = ServerBuilder.forPort(port)</span><br><span class="line">                .addService(<span class="keyword">new</span> HelloRpcServerImpl())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.server.start();</span><br><span class="line">        logger.info(<span class="string">&quot;gRPC Server started, listening on &quot;</span> + port);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Jvm shutdown sync off gRPC server</span></span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;*** shutting down gRPC server since JVM is shutting down&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HelloRpcServer.<span class="keyword">this</span>.stop();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace(System.err);</span><br><span class="line">            &#125;</span><br><span class="line">            System.err.println(<span class="string">&quot;*** server shut down&quot;</span>);</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">            server.awaitTermination(<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Await termination on the main thread since the grpc library uses daemon threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">blockUntilShutdown</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">            server.awaitTermination();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HelloRpcService implement</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRpcServerImpl</span> <span class="keyword">extends</span> <span class="title">HelloRpcServiceGrpc</span>.<span class="title">HelloRpcServiceImplBase</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(HelloRpcRequest request, StreamObserver&lt;HelloRpcReply&gt; responseObserver)</span> </span>&#123;</span><br><span class="line">            HelloRpcReply reply = HelloRpcReply.newBuilder().setName(<span class="string">&quot;Hello &quot;</span> + request.getName()).build();</span><br><span class="line">            <span class="comment">// StreamObserver 应答观察者，一个特殊的接口，服务器用应答来调用它</span></span><br><span class="line">            <span class="comment">// HelloReply 返回给客户端，然后表明我们已经完成了对 RPC 的处理。</span></span><br><span class="line">            responseObserver.onNext(reply);</span><br><span class="line">            responseObserver.onCompleted();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//  Main launches the server from the command line.</span></span><br><span class="line">        HelloRpcServer rpcService = <span class="keyword">new</span> HelloRpcServer();</span><br><span class="line">        rpcService.start();</span><br><span class="line">        rpcService.blockUntilShutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建-RpcClient-端"><a href="#创建-RpcClient-端" class="headerlink" title="创建 RpcClient  端"></a>创建 RpcClient  端</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello Rpc Client examples.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-12 20:16:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloRpcClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(HelloRpcClient.class.getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloRpcServiceGrpc.HelloRpcServiceBlockingStub blockingStub;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloRpcClient</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 将通道传递给代码可以使代码更易于测试，并且更易于重用通道。</span></span><br><span class="line">        <span class="keyword">this</span>.blockingStub = HelloRpcServiceGrpc.newBlockingStub(channel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用 RPC server</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;Will try to greet &quot;</span> + name + <span class="string">&quot; ...&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建并填充一个 HelloRequest 发送给服务。</span></span><br><span class="line">        HelloRpcRequest request = HelloRpcRequest.newBuilder().setName(name).build();</span><br><span class="line">        HelloRpcReply rpcReply = blockingStub.sayHello(request);</span><br><span class="line">        logger.info(<span class="string">&quot;result: &quot;</span> + rpcReply.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// rpc服务地址</span></span><br><span class="line">        String target = <span class="string">&quot;localhost:8000&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建到服务器的通信通道，称为通道。 通道是线程安全的并且可重用。</span></span><br><span class="line">        <span class="comment">// 通常在应用程序的开头创建通道并重复使用它们，直到应用程序关闭.</span></span><br><span class="line">        ManagedChannel managedChannel = ManagedChannelBuilder</span><br><span class="line">                .forTarget(target)</span><br><span class="line">                <span class="comment">// 默认情况下，通道是安全的（通过SSL / TLS）。 对于该示例，我们禁用TLS以避免需要证书。</span></span><br><span class="line">                .usePlaintext()</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HelloRpcClient rpcClient = <span class="keyword">new</span> HelloRpcClient(managedChannel);</span><br><span class="line">            rpcClient.send(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// ManagedChannels使用诸如线程和TCP连接之类的资源。 </span></span><br><span class="line">            <span class="comment">// 为防止泄漏这些资源，当不再使用该通道时，应将其关闭。 </span></span><br><span class="line">            <span class="comment">// 如果可以再次使用，请使其运行。</span></span><br><span class="line">            managedChannel.awaitTermination(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="跨平台扩展"><a href="#跨平台扩展" class="headerlink" title="跨平台扩展"></a>跨平台扩展</h3><p>你可以尝试用不同语言在客户端和服务端构建并运行例子。或者你可以尝试 gRPC 最有用的一个功能，不同的语言间的互操作性，即在不同的语言运行客户端和服务端。每个服务端和客户端使用从同一过 proto 文件生成的接口代码，则意味着任何 <code>HelloRpc</code> 客户端可以与任何 <code>HelloRpc</code> 服务端对话。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>gRPC 基于 HTTP/2 标准设计，带来诸如双向流、流控、头部压缩、单 TCP 连接上的多复用请求等特。这些特性使得其在移动设备上表现更好，更省电和节省空间占用。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;gRPC-高性能的RPC框架简单示例&quot;&gt;&lt;a href=&quot;#gRPC-高性能的RPC框架简单示例&quot; class=&quot;headerlink&quot; title=&quot;gRPC  高性能的RPC框架简单示例&quot;&gt;&lt;/a&gt;gRPC  高性能的RPC框架简单示例&lt;/h2&gt;&lt;h3 id=&quot;什么是-gRPC-？&quot;&gt;&lt;a href=&quot;#什么是-gRPC-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 gRPC ？&quot;&gt;&lt;/a&gt;什么是 gRPC ？&lt;/h3&gt;&lt;p&gt;gRPC由 Google 开发，是一款跨语言、跨平台、开源的远程过程调用的(RPC)高性能框架。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gRPC" scheme="https://chivalry727.github.io/tags/gRPC/"/>
    
      <category term="RPC 框架" scheme="https://chivalry727.github.io/tags/RPC-%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之观察者模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-11T12:01:11.000Z</published>
    <updated>2020-08-13T14:28:46.634Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之观察者模式"><a href="#每天一个设计模式之观察者模式" class="headerlink" title="每天一个设计模式之观察者模式"></a>每天一个设计模式之观察者模式</h2><h3 id="让你的对象知悉现况"><a href="#让你的对象知悉现况" class="headerlink" title="让你的对象知悉现况"></a>让你的对象知悉现况</h3><p>有一个模式可以帮你的对象知悉现况，不会错过该对象感兴趣的事。对象甚至在运行时可决定是否需要继续被通知。观察者模式是JDK中使用最多的模式之一，非常有用。我们会一并介绍一对多关系，以及松耦合。有了观察者，你将会消息灵通。</p><a id="more"></a><h3 id="让我们来模拟一个气象监测应用"><a href="#让我们来模拟一个气象监测应用" class="headerlink" title="让我们来模拟一个气象监测应用"></a>让我们来模拟一个气象监测应用</h3><p>此系统中的三个部分是气象站（获取实际气象数据的物理装置）、WeatherData对象（追踪来自气象站的数据）和公告板（显示目前天气状况给用户看）。</p><p>我们的工作就是建立一个应用，利用WeatherData对象取得数据，并更新三个公告板：目前状况、气象统计和天气预报。</p><h3 id="瞧瞧WeatherData类"><a href="#瞧瞧WeatherData类" class="headerlink" title="瞧瞧WeatherData类"></a>瞧瞧WeatherData类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例变量声明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取温度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getTemperature</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取湿度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getHumidity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取气压</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getPressure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一旦气象测量更新，此方法就会被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measurementsChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取温度、湿度、气压</span></span><br><span class="line">        <span class="keyword">float</span> temperature = getTemperature();</span><br><span class="line">        <span class="keyword">float</span> humidity = getHumidity();</span><br><span class="line">        <span class="keyword">float</span> pressure = getPressure();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用每个公告板更新显示，传入最新的测量值</span></span><br><span class="line">        currentConditionsDisplay.update(temperature, humidity, pressure);</span><br><span class="line">        statisticsDisplay.update(temperature, humidity, pressure);</span><br><span class="line">        forecastDisplay.update(temperature, humidity, pressure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义观察者模式"><a href="#定义观察者模式" class="headerlink" title="定义观察者模式"></a>定义观察者模式</h3><p>观察者模式定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p><h3 id="定义观察者模式类图"><a href="#定义观察者模式类图" class="headerlink" title="定义观察者模式类图"></a>定义观察者模式类图</h3><p><img src="http://wx1.sinaimg.cn/large/008aQ1h9ly1ghn6xy61myj30t50j8teb.jpg" alt="image-20200811212308343"></p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><p>为了交互对象之间的松耦合设计而努力。</p><h3 id="使用观察者来改造气象监测应用"><a href="#使用观察者来改造气象监测应用" class="headerlink" title="使用观察者来改造气象监测应用"></a>使用观察者来改造气象监测应用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主题接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当主题状态改变时，该方法被调用，以通知所有观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新气象值改变时，传递给观察者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temperature</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> humidity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pressure</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公告板显示调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherData</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> pressure;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeatherData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一旦气象测量更新，此方法就会被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMeasurements</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取温度、湿度、气压</span></span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        <span class="keyword">this</span>.pressure = pressure;</span><br><span class="line">        <span class="comment">// 通知观察者</span></span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册新的观察者</span></span><br><span class="line">        observers.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 移除观察者</span></span><br><span class="line">        <span class="keyword">int</span> i = observers.indexOf(observer);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            observers.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通知已注册的观察者</span></span><br><span class="line">        <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">            observer.update(temperature, humidity, pressure);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-11 20:51:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Current Conditions: %s F degrees and %s %% humidity.\n&quot;</span>, temperature, humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-11 20:51:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatisticsDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Current Conditions: %s F degrees and %s %% humidity.\n&quot;</span>, temperature, humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-11 20:51:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForecastDisplay</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Current Conditions: %s F degrees and %s %% humidity.\n&quot;</span>, temperature, humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> temperature, <span class="keyword">float</span> humidity, <span class="keyword">float</span> pressure)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.temperature = temperature;</span><br><span class="line">        <span class="keyword">this</span>.humidity = humidity;</span><br><span class="line">        display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动气象站"><a href="#启动气象站" class="headerlink" title="启动气象站"></a>启动气象站</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStation</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 气象主题，管理观察者，当有数据就通知已注册的观察者</span></span><br><span class="line">        WeatherData weatherData = <span class="keyword">new</span> WeatherData();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察者1</span></span><br><span class="line">        CurrentConditionsDisplay currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplay();</span><br><span class="line">        <span class="comment">// 观察者2</span></span><br><span class="line">        StatisticsDisplay statisticsDisplay = <span class="keyword">new</span> StatisticsDisplay();</span><br><span class="line">        <span class="comment">// 观察者3</span></span><br><span class="line">        ForecastDisplay forecastDisplay = <span class="keyword">new</span> ForecastDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册观察者</span></span><br><span class="line">        weatherData.registerObserver(currentDisplay);</span><br><span class="line">        weatherData.registerObserver(statisticsDisplay);</span><br><span class="line">        weatherData.registerObserver(forecastDisplay);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">56</span>, <span class="number">29.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">39.2f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">75</span>, <span class="number">90</span>, <span class="number">20.1f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用JDK-内置观察者模式来改造应用"><a href="#使用JDK-内置观察者模式来改造应用" class="headerlink" title="使用JDK 内置观察者模式来改造应用"></a>使用JDK 内置观察者模式来改造应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#96;&#96;&#96;java</span><br><span class="line">&#x2F;**</span><br><span class="line"> * 可观察者主题对象</span><br><span class="line"> * @author Mr.zxb</span><br><span class="line"> * @date 2020-08-11 20:11:46</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class WeatherDataObservable extends Observable &#123;</span><br><span class="line">    private float temperature;</span><br><span class="line">    private float humidity;</span><br><span class="line">    private float pressure;</span><br><span class="line">    </span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 一旦气象测量更新，此方法就会被调用</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void setMeasurements(float temperature, float humidity, float pressure) &#123;</span><br><span class="line">        &#x2F;&#x2F; 获取温度、湿度、气压</span><br><span class="line">        this.temperature &#x3D; temperature;</span><br><span class="line">        this.humidity &#x3D; humidity;</span><br><span class="line">        this.pressure &#x3D; pressure;</span><br><span class="line">        </span><br><span class="line">        &#x2F;&#x2F; 指示状态已经改变</span><br><span class="line">        super.setChanged();</span><br><span class="line">        &#x2F;&#x2F; 通知观察者</span><br><span class="line">        super.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.design.observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Observable;</span><br><span class="line"><span class="keyword">import</span> java.util.Observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-11 20:51:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CurrentConditionsDisplayObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span>, <span class="title">DisplayElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> temperature;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> humidity;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.printf(<span class="string">&quot;Current Conditions: %s F degrees and %s %% humidity.\n&quot;</span>, temperature, humidity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> WeatherDataObservable) &#123;</span><br><span class="line">            WeatherDataObservable weatherDataObservable = (WeatherDataObservable) o;</span><br><span class="line">            <span class="keyword">this</span>.temperature = weatherDataObservable.getTemperature();</span><br><span class="line">            <span class="keyword">this</span>.humidity = weatherDataObservable.getHumidity();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.display();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mr.zxb</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-08-11 20:59:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherStationObservable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 气象主题，管理观察者，当有数据就通知已注册的观察者</span></span><br><span class="line">        WeatherDataObservable weatherData = <span class="keyword">new</span> WeatherDataObservable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察者1</span></span><br><span class="line">        CurrentConditionsDisplayObserver currentDisplay = <span class="keyword">new</span> CurrentConditionsDisplayObserver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册观察者</span></span><br><span class="line">        weatherData.addObserver(currentDisplay);</span><br><span class="line"></span><br><span class="line">        weatherData.setMeasurements(<span class="number">80</span>, <span class="number">56</span>, <span class="number">29.4f</span>);</span><br><span class="line">        weatherData.setMeasurements(<span class="number">82</span>, <span class="number">70</span>, <span class="number">39.2f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>观察者模式定义了对象之间一对多的关系</p></li><li><p>主题（也就是可观察者）用一个共同的接口来更新观察者</p></li><li><p>观察者和可观察者之间用松耦合方式结合，可观察者不知道观察者的细节，只知道观察者实现了观察者接口</p></li><li><p>使用此模式时，你可从被观察者处推（push）和拉（pull）数据</p></li><li><p>有多个观察者时，不可以依赖特定的通知次序</p></li><li><p>Java有多种观察者模式的实现，包括了通用的 <code>java java.util.Observable</code></p></li><li><p>要注意<code>java java.util.Observable</code>实现上带来的一些问题</p></li><li><p>如果有必要，可以实现自己的Observable</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之观察者模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之观察者模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之观察者模式&quot;&gt;&lt;/a&gt;每天一个设计模式之观察者模式&lt;/h2&gt;&lt;h3 id=&quot;让你的对象知悉现况&quot;&gt;&lt;a href=&quot;#让你的对象知悉现况&quot; class=&quot;headerlink&quot; title=&quot;让你的对象知悉现况&quot;&gt;&lt;/a&gt;让你的对象知悉现况&lt;/h3&gt;&lt;p&gt;有一个模式可以帮你的对象知悉现况，不会错过该对象感兴趣的事。对象甚至在运行时可决定是否需要继续被通知。观察者模式是JDK中使用最多的模式之一，非常有用。我们会一并介绍一对多关系，以及松耦合。有了观察者，你将会消息灵通。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="观察者模式" scheme="https://chivalry727.github.io/tags/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java GC 笔记</title>
    <link href="https://chivalry727.github.io/Java%20GC%20%E7%AC%94%E8%AE%B0/"/>
    <id>https://chivalry727.github.io/Java%20GC%20%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-09T07:44:12.000Z</published>
    <updated>2020-08-22T14:45:46.243Z</updated>
    
    <content type="html"><![CDATA[<h3 id="垃圾收集器（Garbage-Collection，GC）"><a href="#垃圾收集器（Garbage-Collection，GC）" class="headerlink" title="垃圾收集器（Garbage Collection，GC）"></a>垃圾收集器（Garbage Collection，GC）</h3><h4 id="内存分配与回收的神秘面纱"><a href="#内存分配与回收的神秘面纱" class="headerlink" title="内存分配与回收的神秘面纱"></a>内存分配与回收的神秘面纱</h4><p>Java的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java的自动内存管理最核心的功能是<strong>Java Heap</strong>内存中对象的分配与回收。</p>  <a id="more"></a>  <h5 id="堆内存划分"><a href="#堆内存划分" class="headerlink" title="堆内存划分"></a>堆内存划分</h5><p>堆内存分为新生代、老年代和永久代。新生代又被进一步分为：Eden 区＋Survivor1 区＋Survivor2 区。值得注意的是，在 JDK8中移除永久代，取而代之的是一个叫元空间（Metaspace）的区域（永久代使用的是JVM的堆内存空间，而元空间使用的是物理内存，直接受到本机的物理内存限制）</p><h5 id="对象优先在Edge区分配"><a href="#对象优先在Edge区分配" class="headerlink" title="对象优先在Edge区分配"></a>对象优先在Edge区分配</h5><p>目前主流的垃圾收集器都会采用分代回收算法，因此需要将堆内存分为新生代和老年代，这样我们就可以根据各个年代的特点选择合适的垃圾收集算法。</p><p>大多数情况下，对象在新生代中 eden 区分配。当 eden 区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p><ul><li><strong>新生代GC（Minor GC）</strong>: 指发生新生代的的垃圾收集动作，Minor GC非常频繁，回收速度一般也比较快。</li><li><strong>老年代GC（Major GC/Full GC）</strong>: 指发生在老年代的GC，出现了Major GC经常会伴随至少一次的Minor GC（并非绝对），Major GC的速度一般会比Minor GC的慢10倍以上。</li></ul><h5 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h5><p>大对象就是需要大量连续内存空间的对象（比如：字符串、数组）。</p><p><strong>为什么要这样呢？</strong></p><p>为了避免为大对象分配内存时由于分配担保机制带来的复制而降低效率。</p><h5 id="长期存活的对象将进入老年代"><a href="#长期存活的对象将进入老年代" class="headerlink" title="长期存活的对象将进入老年代"></a>长期存活的对象将进入老年代</h5><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这一点，虚拟机给每个对象一个对象年龄（Age）计数器。</p><p>如果对象在 Eden 出生并经过第一次 Minor GC 后仍然能够存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为1，对象在 Survivor 中每熬过一次 MinorGC, 年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h5 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h5><p>为了更好的适应不同程序的内存情况，虚拟机不是永远要求对象年龄必须达到了某个值才能进入老年代，如果 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无需达到要求的年龄。</p><h5 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h5><p>在发生Minor GC前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的总空间，如果条件成立，那么Minor GC可以确保是安全的。</p><p>如果不成立，则虚拟机会查看<code>HandlePromotionFailure</code>设置值是否允许担保失败。</p><p>如果允许，那么会检查老年代最大可用的连续空间是否大于历次晋升到老年代的平均大小，如果大于，将尝试一次Minor GC，尽管这次Minor GC是有风险的。</p><p>如果小于，或者<code>HandlePromotionFailure</code>设置不允许冒险，那么这时就要执行一次Full GC。</p><h4 id="如何判断对象活着？"><a href="#如何判断对象活着？" class="headerlink" title="如何判断对象活着？"></a>如何判断对象活着？</h4><h5 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h5><ul><li>是在对象中添加一个引用计数器，每当有一个地方引用它时，计数器就加1；当引用失效时，计数器就减1；任何时刻计数器为0的对象就是不能再被使用</li><li>主流Java虚拟机并没有选用引用计数算法来管理内存</li><li>原因是该算法很难解决对象之间互相循环引用的问题</li></ul><h5 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h5><h6 id="什么是可达性分析算法"><a href="#什么是可达性分析算法" class="headerlink" title="什么是可达性分析算法"></a>什么是可达性分析算法</h6><p>通过一系列称为“GC Roots”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走的路径称为“引用链（Reference Chain）”，如果某个对象到GC Roots间没有任何引用链相连或从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的</p><p><img src="http://wx1.sinaimg.cn/large/008aQ1h9ly1ghrccgxbicj30wm0u0413.jpg"></p><h6 id="什么是-GC-Roots对象"><a href="#什么是-GC-Roots对象" class="headerlink" title="什么是 GC Roots对象"></a>什么是 GC Roots对象</h6><ul><li>虚拟机栈中引用的对象，比如各线程调用方法堆栈中使用的参数、局部变量、临时变量等</li><li>方法区中类静态属性引用的对象，比如字符串常量池里的引用</li><li>方法区中类静态属性引用的对象，比如Java类的引用类型静态变量</li><li>本地方法栈中JNI引用的对象</li><li>Java虚拟机内部的引用，比如：基本数据类型对应的Class对象，以及一些异常对象（NPE、OOM）等，还有系统类加载器</li><li>所有被同步锁（synchronized关键字）持有的对象</li><li>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><h4 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h4><p>无论通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象是否引用链可达，判定对象是否存活都和“引用“有关</p><h5 id="强引用（Strongly-Reference）"><a href="#强引用（Strongly-Reference）" class="headerlink" title="强引用（Strongly Reference）"></a>强引用（Strongly Reference）</h5><ul><li>不会被垃圾收集器回收掉的引用</li></ul><h5 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h5><ul><li>当JVM将要发生内存溢出前，会回收这部分引用，若内存还是不够，则OOM</li></ul><h5 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h5><ul><li>被弱引用关联的对象只能生存到下一次垃圾收集发生为止</li></ul><h5 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h5><ul><li>最弱的引用关系，无法造成任何影响，也无法通过虚引用获取一个对象实例</li><li>虚引用关联的唯一目的只是为了能在这个对象被垃圾收集器回收时候收到一个通知</li></ul><h4 id="引用计数式垃圾收集"><a href="#引用计数式垃圾收集" class="headerlink" title="引用计数式垃圾收集"></a>引用计数式垃圾收集</h4><h5 id="直接垃圾收集"><a href="#直接垃圾收集" class="headerlink" title="直接垃圾收集"></a>直接垃圾收集</h5><ul><li>主流Java虚拟机中均未涉及此算法</li><li>Objective-C采用此方式作为内存管理</li></ul><h4 id="追踪式垃圾收集（间接垃圾收集）"><a href="#追踪式垃圾收集（间接垃圾收集）" class="headerlink" title="追踪式垃圾收集（间接垃圾收集）"></a>追踪式垃圾收集（间接垃圾收集）</h4><h5 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h5><h6 id="弱分代假说"><a href="#弱分代假说" class="headerlink" title="弱分代假说"></a>弱分代假说</h6><ul><li>大多数对象朝生夕死</li></ul><h6 id="强分代假说"><a href="#强分代假说" class="headerlink" title="强分代假说"></a>强分代假说</h6><ul><li><p>熬过多次垃圾收集过程的对象越难以消亡</p></li><li><p>根据以上假说多款收集器一致的设计原则：</p><ul><li>收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄分配到不同的区域之中存储</li><li>根据分代设计理论，一般至少会把Java堆划分为新生代和老年代，在新生代中，每次垃圾收集会有大量的对象死亡，而每次存活的少量对象晋升到老年代存放</li></ul><p>跨代引用假说</p><ul><li>跨代引用相对于同代引用来说仅占少数</li><li>存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的</li><li>依据该假说，就不用为了少量的跨代引用扫描整个老年代，也不必浪费空间专门记录每个对象是否存在或存在哪些跨代引用，只需要在新生代建立一个全局的数据结构（记忆集），这个结构把老年代划分若干个小块，标识出老年代的哪一块内存会存在跨代引用</li><li>在Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描，这样就不用扫描整个老年代了</li></ul></li></ul><h4 id="垃圾收集分类"><a href="#垃圾收集分类" class="headerlink" title="垃圾收集分类"></a>垃圾收集分类</h4><h6 id="部分收集（Partial-GC）"><a href="#部分收集（Partial-GC）" class="headerlink" title="部分收集（Partial GC）"></a>部分收集（Partial GC）</h6><ul><li>目标不是完整收集整个Java堆的垃圾收集</li><li>新生代收集（<strong>Minor GC/Young GC</strong>）<ul><li>目标只是新生代的垃圾收集</li></ul></li><li>老年代收集（<strong>Major GC/Old GC</strong>）<ul><li>目标只是老年代的垃圾收集</li><li>目前只有CMS收集器会有单独收集老年代的行为</li></ul></li><li>混合收集（<strong>Mixed GC</strong>）<ul><li>目标是收集整个新生代以及部分老年代的垃圾收集</li><li>目前只有<strong>G1收集器</strong>有这种行为</li></ul></li></ul><h6 id="整堆收集（Full-GC）"><a href="#整堆收集（Full-GC）" class="headerlink" title="整堆收集（Full GC）"></a>整堆收集（Full GC）</h6><ul><li>目标收集整个Java堆和方法区的垃圾收集</li></ul><p>Full GC触发条件</p><ul><li>System.gc()方法的调用</li><li>方法区空间不足</li><li>Metaspace区内存达到阈值</li><li>统计得到的Minor GC晋升到旧生代的平均大小大于老年代的剩余空间</li><li>堆中产生大对象超过阈值</li><li>老年代连续空间不足</li><li>CMS GC时出现promotion failed和concurrent mode failure</li></ul><h4 id="垃圾收集器算法"><a href="#垃圾收集器算法" class="headerlink" title="垃圾收集器算法"></a>垃圾收集器算法</h4><h5 id="标记-清除算法（Mark-Sweep）"><a href="#标记-清除算法（Mark-Sweep）" class="headerlink" title="标记-清除算法（Mark-Sweep）"></a>标记-清除算法（Mark-Sweep）</h5><ul><li><p>分为“标记”和“清除”两个阶段</p><ul><li>首先标记所有要回收的对象，在标记完成后，统一回收掉所有被标记的对象</li><li>也可以反过来，标记存活的对象，统一回收所有未被标记的对象</li><li>标记的过程就是对象是否属于垃圾的判断过程</li></ul></li><li><p>缺点</p><ul><li><p>执行效率不稳定</p><ul><li>如果堆中有大量的对象，其中大部分是要被回收堆，这时就需要大量标记和清除的动作，导致标记和清除过程的执行效率都随着对象的数量增长而降低</li></ul></li><li><p>内存空间碎片化问题</p><ul><li>标记/清除后产生大量不连续的内存碎片，空间碎片太多可能会导致以后程序运行过程需要分配较大的对象时无法找到足够的连续内存而提前触发一次GC动作</li></ul></li></ul></li><li><p>在HotSpot虚拟机中</p><ul><li>关注低延迟的CMS收集器是基于标记-清除算法的，当内存空间碎片过多时CMS收集器就会采用标记-整理算法</li></ul><h5 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h5></li><li><p>简称复制算法，解决标记-清除算法面临大量对象执行效率低的问题</p><ul><li>就是将内存按容量划分为大小相等的两块，每次只是使用其中一块</li><li>当这一块内存快使用完，就将存活的对象复制到另一块内存上面，然后把使用的这一块内存空间一次清理掉</li></ul></li><li><p>好处</p><ul><li>不用考虑空间碎片化问题，只需移动堆顶指针，按顺序分配即可，这样实现简单高效</li></ul></li><li><p>缺点</p><ul><li>如果内存中多数对象都是存活的，就会存在大量内存复制的开销</li><li>将内存缩小为原来的一半，浪费了大量的空间</li></ul></li><li><p>根据以上特点提出更优化的半区复制分代策略（Appel式回收）</p><ul><li><p>Appel式回收的做法</p><ul><li><p>将新生代分为</p><ul><li>一块较大的Eden空间</li><li>两块较小的Survivor空间</li></ul></li><li><p>每次分配内存只使用Eden空间和其中一块Survivor空间，然后直接清理掉Eden空间和用过的那块Survivor空间</p></li><li><p>发生垃圾收集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用的Survivor空间</p></li><li><p>HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是新生代可用内存空间为整个新生代容量的90%（Eden80%+Survivor10%）</p></li><li><p>但无法保证每次回收都有不多于10%对象存活，所以Appel式回收设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就要依赖其他内存区域（实际大多是老年代）进行分配担保（Handle Promotion）</p></li></ul></li><li><p>HotSpot的Serial/ParNew等新生代收集器均采用这种策略来设计新生代内存布局</p></li></ul><h5 id="标记-整理算法（Mark-Compact）"><a href="#标记-整理算法（Mark-Compact）" class="headerlink" title="标记-整理算法（Mark-Compact）"></a>标记-整理算法（Mark-Compact）</h5></li><li><p>标记过程仍与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都像内存空间一端移动，然后直接清理掉边界以外的内存</p></li><li><p>标记-清除和标记-整理本质区别：前者是非移动式的回收算法，后者是移动式的</p></li><li><p>缺点</p><ul><li><p>移动存活对象，在老年代中每次回收都有大量对象存活的区域，移动存活对象并更新所有引用这些对象的地方将会是极为繁重的操作</p></li><li><p>对象移动操作必须全程暂停用户程序才能进行</p></li><li><p>若不移动和整理存活对象，将会导致空间碎片化问题</p><ul><li>就只能依赖复杂的内存分配器和内存访问器来解决</li></ul></li></ul></li><li><p>在HotSpot虚拟机中</p><ul><li>关注吞吐量的收集器Parallel Scavenge基于标记-整理算法</li></ul></li></ul><h4 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h4><h5 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h5><ul><li><p>在JDK1.3以前是HotSpot虚拟机新生代收集器的唯一选择</p></li><li><p>客户端模式下默认新生代收集器</p></li><li><p>单线程工作的收集器</p></li><li><p>在收集过程中会停顿用户线程，直到它收集介绍</p></li><li><p>优势</p><ul><li>和其他单线程收集器相比，简单而高效</li><li>对于内存资源受限的环境，是所有收集器里额外内存消耗最小的</li><li>对于单核处理器或处理器核心较少的环境来说，Serial收集器由于没有线程交互的开销，可以获得最高的单线程收集效率</li></ul><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghzxp44d6sj31160bcq3n.jpg"></p></li></ul><h5 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h5><ul><li>是Serial收集器的多线程并行版本</li><li>ParNew收集器是激活CMS收集器后的默认新生代收集器</li><li>从JDK9 G1收集器的出现，CMS+ParNew收集器的组合就不再是官方推荐的服务器模式下的默认收集器</li><li>ParNew收集器默认开启的收集线程数与处理器核心数量相同，也可以使用<code>-XX:ParallelGCThreads</code>参数来限制垃圾收集器的线程数</li></ul><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghzxtft4mgj31160bawfa.jpg"></p><h5 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h5><ul><li><p>也是新生代收集器</p></li><li><p>基于标记-复制算法实现的收集器</p></li><li><p>也是并行收集的多线程收集器</p></li><li><p>特点</p><ul><li>与其他收集器关注点不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间</li><li>Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量</li><li>所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值</li><li>吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 运行垃圾收集器时间）</li><li>所以Parallel Scavenge收集器又被称作“吞吐量优先收集器”</li></ul></li><li><p>Parallel Scavenge收集器提供了两个参数用来精确控制吞吐量</p><ul><li>控制最大垃圾收集停顿时间的<code>-XX:MaxGCPauseMillis</code>参数</li><li>直接设置吞吐量大小的<code>-XX:GCTimeRatio</code>参数</li></ul><p><img src="http://wx4.sinaimg.cn/large/008aQ1h9ly1ghzy9wa8ehj31160ba751.jpg"></p></li></ul><h5 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h5><ul><li><p>Serial Old收集器是Serial收集器的老年代版本</p></li><li><p>也是一个单线程收集器</p></li><li><p>使用标记-整理算法实现的收集器</p></li><li><p>主要也是提供客户端模式下HotSpot虚拟机使用</p></li><li><p>若是用于服务端模式下，则可能有两种用途</p><ul><li>在JDK5及以前的版本中与Parallel Scavenge收集器搭配使用</li><li>是作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用</li></ul><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghzxp44d6sj31160bcq3n.jpg"></p></li></ul><h5 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h5><ul><li>Parallel Old收集器是Parallel Scavenge收集器的老年代版本</li><li>支持多线程并发收集，基于标记-整理算法实现</li><li>从JDK6开始提供，为了解决Parallel Scavenge收集器的尴尬状态，原因在于Parallel Scavenge收集器，老年代除了Serial Old收集器以外别无选择，无法与其他表现良好的老年代收集器配合工作，如CMS收集器</li><li>吞吐量优先收集器的组合，在注重吞吐量或者处理器资源较为稀缺的场合，可以考虑Parallel Scavenge加Parallel Old收集器这个组合</li></ul><p><img src="http://wx4.sinaimg.cn/large/008aQ1h9ly1ghzy9wa8ehj31160ba751.jpg"></p><h5 id="CMS（Concurrent-Mark-Sweep）收集器"><a href="#CMS（Concurrent-Mark-Sweep）收集器" class="headerlink" title="CMS（Concurrent Mark Sweep）收集器"></a>CMS（Concurrent Mark Sweep）收集器</h5><h6 id="什么是CMS收集器"><a href="#什么是CMS收集器" class="headerlink" title="什么是CMS收集器"></a>什么是CMS收集器</h6><ul><li>以获取最短回收停顿时间为目标的收集器</li><li>从名字来看CMS收集器是基于标记-清除算法实现的</li><li>在JDK9以后不官方不推荐使用CMS收集器</li></ul><h6 id="CMS-工作过程"><a href="#CMS-工作过程" class="headerlink" title="CMS 工作过程"></a>CMS 工作过程</h6><ul><li><p>初始标记（CMS initial mark）</p><ul><li>标记一下GC Roots能直接关联到到对象，速度很快，需要停顿用户线程</li></ul></li><li><p>并发标记（CMS concurrent mark）</p><ul><li>从GC Roots直接关联对象开始遍历整个对象图的过程，该过程耗时长但不需要停顿用户线程</li></ul></li><li><p>重新标记（CMS remark）</p><ul><li>修正并发标记期间，因用户线程继续运作而导致标记产生变动但那一部分对象的标记记录，该阶段停顿的时间比初始标记要长一些，但也远比并发标记的时间要短</li></ul></li><li><p>并发清除（CMS concurrent sweep）</p><ul><li>清理删掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以该阶段也是可以和用户线程同时并发</li></ul><p><img src="http://wx3.sinaimg.cn/large/008aQ1h9ly1ghzyuvrtrdj30tw07tq3n.jpg"></p></li></ul><h6 id="CMS-优点"><a href="#CMS-优点" class="headerlink" title="CMS 优点"></a>CMS 优点</h6><ul><li>并发收集</li><li>低停顿</li></ul><h6 id="CMS-缺点"><a href="#CMS-缺点" class="headerlink" title="CMS 缺点"></a>CMS 缺点</h6><ul><li><p>对处理器资源非常敏感，在并发阶段，会导致应用程序变慢，降低了总吞吐量</p></li><li><p>CMS收集器默认启动的回收线程数是（处理器核心数量+3）/4</p><ul><li>如果处理器核心数在4个以上，并发回收时垃圾收集器只占用不超过25%的处理器运算资源，并且会随着处理器核心数增加而下降</li><li>当处理器核心数不足4个时，CMS收集器对用户程序的影响就可能变得很大</li></ul></li><li><p>由于CMS收集器无法处理“浮动垃圾”，有可能出现“Concurrent Mode Failure”失败进而导致一次完全“Stop The World”的Full GC的产生</p><ul><li>浮动垃圾：在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集处理掉它们，只好留到下一次清理，这一部分垃圾就是浮动垃圾</li></ul></li><li><p>由于CMS是一款基于“标记-清除”算法实现的收集器，就会造成大量空间碎片产生，如果空间碎片过多时，当需要足够大大连续空间来分配大对象大时候，会不得不提前触发Full GC的情况</p><ul><li><p>解决方案</p><ul><li>CMS收集器提供一个-XX:+UseCMSCompactAtFullCollection开关参数（默认开启，JDK9开始弃用），用于在CMS收集器不得不进行Full GC时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，（在Shenandoah和ZGC出现前）是无法并发的</li><li>空间碎片问题虽然解决了，但停顿时间又会变长，因此虚拟机提供了参数-XX:CMSFullGCsBeforeCompaction（JDK9开始弃用），用于要求CMS收集器在执行过若干次（数量由参数值决定）不整理空间的Full GC之后，下一次进入Full GC前会先进行碎片整理（默认值为0，表示每次进入Full GC时都进行碎片整理）</li></ul></li></ul></li></ul><h5 id="Garbage-First（G1）收集器"><a href="#Garbage-First（G1）收集器" class="headerlink" title="Garbage First（G1）收集器"></a>Garbage First（G1）收集器</h5><h6 id="什么是G1收集器"><a href="#什么是G1收集器" class="headerlink" title="什么是G1收集器"></a>什么是G1收集器</h6><ul><li>Garbage First（简称G1）收集器是垃圾收集器技术发展历史上的里程碑式的成果，它开创了收集器面向局部收集的设计思路和基于Region的内存布局形式</li><li>从JDK7确立项目目标，G1收集器就被视为JDK7中HotSpot虚拟机的一项重要进化特征，直到JDK8 Update 40之后，这个版本以后的G1收集器才被Oracle官方称为“全功能的垃圾收集器”</li><li>面向服务端应用的垃圾收集器，HotSpot期望它代替CMS收集器，在JDK9中G1就代替Parallel Scavenge加Parallel Old组合，成为服务端模式下的默认垃圾收集器，而CMS则标记为不推荐使用的收集器，在未来CMS可能会被废弃</li></ul><h6 id="G1收集器设计模式"><a href="#G1收集器设计模式" class="headerlink" title="G1收集器设计模式"></a>G1收集器设计模式</h6><ul><li><p>G1收集器以前的其他收集器，垃圾收集的目标范围要么是整个新生代（Minor GC），要么是老年代（Major GC），要么是整个Java堆（Full GC）；而G1跳出了这个樊笼，它可以面对堆内存任何部分来组成回收集（Collection Set，简称CSet）进行回收，衡量标准不在是属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的混合收集（Mixed GC）模式</p></li><li><p>G1开创基于Region的堆内存布局是它能够实现这个目标的关键</p></li><li><p>虽然G1也遵循分代收集理论设计的，但在堆内存的布局与其他收集器有很大差异</p><ul><li>G1不再坚持固定大小以及固定数量但分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Edge空间、Survivor空间或者老年代空间</li><li>G1收集器能根据不同的Region采用不同的策略去处理</li><li>Region中还有一类特殊的Humongous区域，专门用来存储大对象，G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象</li><li>每个Region的大小可以通过参数-XX:G1HeapRegionSize设定，取值范围为1MB-32MB，且为2的n次幂</li><li>对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待</li></ul></li><li><p>虽然G1仍然保留新生代和老年代的概念，但新生代和老年代不再是固定的了，它们都是一系列区域（不需要连续）的动态集合</p><ul><li>G1收集器之所以能够建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集</li><li>处理思路是让G1收集器跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间（-XX:MaxGCPauseMillis指定，默认是200ms），优先处理回收价值受益最大的那些Region，这也就是“Garbage First”名字的由来</li><li>这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率</li></ul></li></ul><h6 id="G1收集器运作过程（不计算用户线程运行过程中的动作）"><a href="#G1收集器运作过程（不计算用户线程运行过程中的动作）" class="headerlink" title="G1收集器运作过程（不计算用户线程运行过程中的动作）"></a>G1收集器运作过程（不计算用户线程运行过程中的动作）</h6><ul><li><p>初始标记（Initial Marking）</p><ul><li>标记GC Roots能直接关联到到对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象</li><li>该阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实行并没有额外的停顿</li></ul></li><li><p>并发标记（Concurrent Marking）</p><ul><li>从GC Roots开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时比较长，但可与用户线程并发执行</li><li>当扫描图扫描完成后，还要重新处理SATB记录下的在并发时有引用变动的对象</li></ul></li><li><p>最终标记（Final Marking）</p><ul><li>对用户线程做另一个短暂对暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录</li></ul></li><li><p>筛选回收（Live Data Counting and Evacuation）</p><ul><li>负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来指定回收计划，可以自由选择任意多个Region构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间</li><li>这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的</li></ul></li><li><p>G1收集器除了并发标记外，其余阶段也是要完全暂停用户线程的，换言之，它并非纯粹地追求低延迟，官方给它设定的目标是在延迟可控的情况下获得尽可能高的吞吐量，所以才担当起“全功能收集器”的重任与期望</p><p><img src="http://wx4.sinaimg.cn/large/008aQ1h9ly1ghzyvezb1bj30ti07aq3p.jpg"></p></li></ul><h6 id="G1收集器特点"><a href="#G1收集器特点" class="headerlink" title="G1收集器特点"></a>G1收集器特点</h6><ul><li><p>可由用户指定期望的停顿时间是G1收集器很强大的一个功能，设置不同的期望停顿时间，可让G1在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡</p><ul><li>默认停顿时间200ms，必须保证“期望值”符合实际</li><li>若是停顿时间设置很低，则可能出现由于停顿目标时间太短，导致每次选出来的回收集只占堆内存很小的一部分，收集器收集的速度逐渐跟不上分配器分配的速度，导致垃圾慢慢堆积，最终引发Full GC而降低性能</li><li>所以期望停顿时间设置为100-200ms或200-300ms是比较合理的</li></ul></li><li><p>从G1开始，先进的垃圾收集器的设计导向都不约而同地变为追求能够应付应用的内存分配速率（Allocation Rate），而不是追求一次把整个Java堆全部清理干净</p><ul><li>这样应用在分配，同时收集器在收集，只要收集的速度能跟上对象分配的速度，那这一切能运作得很完美</li></ul></li></ul><h6 id="G1收集器相比CMS的优点"><a href="#G1收集器相比CMS的优点" class="headerlink" title="G1收集器相比CMS的优点"></a>G1收集器相比CMS的优点</h6><ul><li><p>G1从整体来看是基于“标记-整理”算法实现的收集器，从局部上看（两个Region之间）又是基于“标记-复制”算法实现，无论如何，这两种算法在运行期间都不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存</p><ul><li>有利于应用程序长时间运行</li><li>分配大对象时不容易造成无法找到连续内存空间而提前触发一次收集</li></ul></li><li><p>可以自定义指定最大停顿时间</p></li><li><p>分Region的内存布局</p></li><li><p>按收益动态确定回收集</p></li></ul><h6 id="G1收集器相比CMS的缺点"><a href="#G1收集器相比CMS的缺点" class="headerlink" title="G1收集器相比CMS的缺点"></a>G1收集器相比CMS的缺点</h6><ul><li><p>在运行过程中，G1垃圾收集器内存占用（Footprint）要比CMS要高</p><ul><li>G1和CMS都使用卡表来处理跨代指针，但G1的卡表实现更复杂，堆中每个Region，无论扮演新生代还是老年代角色，都必须有一份卡表，导致G1的记忆集（和其他内存消耗）可能会占整个堆容量的20%乃至更多的内存空间</li><li>CMS的卡表就相当简单，只有唯一一份，而且只需要处理老年代到新生代的引用，反过来不需要，由于新生代的对象具有朝生夕灭的不稳定性，引用变化频繁，能省下这个区域的维护开销是很划算的</li></ul></li><li><p>程序运行时的额外执行负载（Overload）要比CMS高</p><ul><li><p>由于G1和CMS收集器各自实现特点导致用户程序运行时的负载会有不同，譬如它们都使用写屏障，CMS用写后屏障来更新维护卡表</p></li><li><p>G1除了使用写后屏障来进行同样的卡表维护操作外，为了实现原始快照搜索（SATB）算法，还需要使用写前屏障来跟踪并发时的指针变化情况</p><ul><li>相比增量更新算法，原始快照搜索能够减少并发标记和重新标记阶段的消耗，避免CMS那样在最终标记阶段停顿时间过长的缺点，但是在用户程序运行过程中确实会产生由跟踪引用变化带来的额外负担</li><li>由于G1对写屏障的复杂操作要比CMS消耗更多对运算资源，所以CMS的写屏障实现时直接的同步操作， 而G1就不得不将其实现为类似于消息队列的结构，把写前屏障和写后屏障中要做的事情都放到队列里，然后再异步处理</li></ul></li></ul></li><li><p>以上优缺点仅仅是针对G1和CMS两款垃圾收集器单独某方面的实现细节的定性分析，通常说哪款收集器要更好、要好上多少，往往是针对具体场景才能做的定量比较</p><ul><li>目前在小内存应用上CMS的表现大概率仍然会优于G1收集器</li><li>而在大内存应用上G1则大多能发挥其优势</li><li>这个优劣势的Java堆容量平衡点通常在6GB-8GB之间</li><li>随着HotSpot对G1对不断优化，也会让对比结果继续向G1倾斜</li></ul></li></ul><h5 id="低延迟垃圾收集器"><a href="#低延迟垃圾收集器" class="headerlink" title="低延迟垃圾收集器"></a>低延迟垃圾收集器</h5><ul><li><p>垃圾收集器三项重要指标</p><ul><li>内存占用（Footprint）</li><li>吞吐量（Throughput）</li><li>延迟（Latency）</li></ul></li><li><p>实验状态的低延迟垃圾收集器</p><ul><li>Shenandoah收集器（存在于OpenJDK，而不存在于OracleJDK）</li><li>ZGC收集器</li></ul></li></ul><h5 id="不垃圾回收的垃圾收集器"><a href="#不垃圾回收的垃圾收集器" class="headerlink" title="不垃圾回收的垃圾收集器"></a>不垃圾回收的垃圾收集器</h5><h6 id="Epsilon收集器"><a href="#Epsilon收集器" class="headerlink" title="Epsilon收集器"></a>Epsilon收集器</h6><ul><li>JDK11推出的不能够进行垃圾收集的垃圾收集器</li><li>适用于运行数分钟或者数秒，只要Java虚拟机能正确分配内存，在堆耗尽之前就会退出</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;垃圾收集器（Garbage-Collection，GC）&quot;&gt;&lt;a href=&quot;#垃圾收集器（Garbage-Collection，GC）&quot; class=&quot;headerlink&quot; title=&quot;垃圾收集器（Garbage Collection，GC）&quot;&gt;&lt;/a&gt;垃圾收集器（Garbage Collection，GC）&lt;/h3&gt;&lt;h4 id=&quot;内存分配与回收的神秘面纱&quot;&gt;&lt;a href=&quot;#内存分配与回收的神秘面纱&quot; class=&quot;headerlink&quot; title=&quot;内存分配与回收的神秘面纱&quot;&gt;&lt;/a&gt;内存分配与回收的神秘面纱&lt;/h4&gt;&lt;p&gt;Java的自动内存管理主要是针对对象内存的回收和对象内存的分配。同时，Java的自动内存管理最核心的功能是&lt;strong&gt;Java Heap&lt;/strong&gt;内存中对象的分配与回收。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JVM 笔记" scheme="https://chivalry727.github.io/categories/JVM-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="GC" scheme="https://chivalry727.github.io/tags/GC/"/>
    
      <category term="JVM 内存分配" scheme="https://chivalry727.github.io/tags/JVM-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式之策略模式</title>
    <link href="https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>https://chivalry727.github.io/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-08-09T07:27:32.000Z</published>
    <updated>2020-08-13T14:28:37.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个设计模式之策略模式"><a href="#每天一个设计模式之策略模式" class="headerlink" title="每天一个设计模式之策略模式"></a>每天一个设计模式之策略模式</h2><h3 id="什么是策略模式-？"><a href="#什么是策略模式-？" class="headerlink" title="什么是策略模式 ？"></a>什么是策略模式 ？</h3><ul><li>定义一系列算法，封装每个算法，并使它们可互换。策略模式使算法独立于使用该算法的客户端而变化。</li></ul><a id="more"></a><h3 id="先简单的模拟鸭子的应用做起"><a href="#先简单的模拟鸭子的应用做起" class="headerlink" title="先简单的模拟鸭子的应用做起"></a>先简单的模拟鸭子的应用做起</h3><p>   系统的内部设计使用标准的OOP技术，设计了一个鸭子的超类（Superclass），并让各种鸭子继承此超类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嘎嘎叫</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 游泳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游泳...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于每种鸭子外观不同，提供抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other method...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绿头鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;头是绿色的.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红头鸭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedheadDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;头是红色的.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来新增了需求，让鸭子飞起来。于是在Duck超类加上fly()方法，然后所有的鸭子继承fly()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line">    <span class="comment">// other method ...</span></span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸭子飞起来...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，可怕的问题发生了….</p><p>由于并发所有的Duck类都会飞，在超类加上新的行为，会使得某些并不合适该行为的子类也具有该行为。当涉及维护时，为了复用目的而使用继承并不完美。</p><h3 id="利用接口改造"><a href="#利用接口改造" class="headerlink" title="利用接口改造"></a>利用接口改造</h3><p>可以把fly()从超类中提取出来，放进“Flyable接口”中，这么一来，只有会飞的鸭子才实行此接口。同样方式，也可以用设计一个“Quackable接口”，因为不是所有的鸭子都会叫。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 飞行行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 叫声行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Quackable</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 游泳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;游泳...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于每种鸭子外观不同，提供抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// other method ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 绿头鸭，既会飞，又会发出叫声</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;头是绿色的.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 红头鸭，既会飞，又会发出叫声</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedheadDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> <span class="keyword">implements</span> <span class="title">Flyable</span>, <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;头是红色的.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;嘎嘎叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;飞行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 橡皮鸭，不会飞，只会发出叫声</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RubberDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> <span class="keyword">implements</span> <span class="title">Quackable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;橡皮鸭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;橡皮鸭吱吱叫...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 诱饵鸭，既不会飞，也不会叫</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecoyDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;诱饵鸭五颜六色&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道，并非所有的子类都具有飞行和呱呱叫的行为，所以“继承”并不是适当的解决方式。虽然Flyable和Quackable可以解决一部分问题，但是造成代码无法复用，而且对于很多Duck的子类都要稍微修改一下飞行的行为，是非常痛苦的。以上的实现都很糟糕。</p><h3 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h3><ul><li>找出应用中可能需要变化之处，把它们独立出来，不要和那些不需要变化的代码混在一起。</li><li>把会变化的部分取出来，并“封装”起来，好让其他部分不会受到影响</li></ul><h3 id="重构原有的结构"><a href="#重构原有的结构" class="headerlink" title="重构原有的结构"></a>重构原有的结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 飞行行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> FlyBehavior flyBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 叫声行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> QuackBehavior quackBehavior;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performQuack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        quackBehavior.quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performFly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        flyBehavior.fly();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 游泳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;All ducks float, even decoys...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于每种鸭子外观不同，提供抽象方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other method...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 飞行行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWithWings</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m flying...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyNoWay</span> <span class="keyword">implements</span> <span class="title">FlyBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 什么都不做，不会飞</span></span><br><span class="line">        System.out.println(<span class="string">&quot;I can&#x27;t fly&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 叫声行为</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Squeak</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;squeak&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;quack&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MuteQuack</span> <span class="keyword">implements</span> <span class="title">QuackBehavior</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 什么都不做，不会叫</span></span><br><span class="line">        System.out.println(<span class="string">&quot;silence&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MallardDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MallardDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 嘎嘎叫</span></span><br><span class="line">        <span class="keyword">super</span>.quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">        <span class="comment">// 会飞行</span></span><br><span class="line">        <span class="keyword">super</span>.flyBehavior = <span class="keyword">new</span> FlyWithWings();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a green head duck.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelDuck</span> <span class="keyword">extends</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ModelDuck</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置模型鸭的行为，不会飞的行为</span></span><br><span class="line">        <span class="keyword">super</span>.flyBehavior = <span class="keyword">new</span> FlyNoWay();</span><br><span class="line">        <span class="keyword">super</span>.quackBehavior = <span class="keyword">new</span> Quack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a model duck.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态设定行为"><a href="#动态设定行为" class="headerlink" title="动态设定行为"></a>动态设定行为</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鸭子超类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDuck</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他实例...</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlyBehavior</span><span class="params">(FlyBehavior flyBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flyBehavior = flyBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQuackBehavior</span><span class="params">(QuackBehavior quackBehavior)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.quackBehavior = quackBehavior;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// other method...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniDuckSimulator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractDuck duck = <span class="keyword">new</span> MallardDuck();</span><br><span class="line">        duck.performFly();</span><br><span class="line">        <span class="comment">// 动态的改变行为</span></span><br><span class="line">        duck.setQuackBehavior(<span class="keyword">new</span> Squeak());</span><br><span class="line">        duck.performQuack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行时改变行为，只需要调用父类的setter方法就可以了。我们通过策略模式来应对任何的改变，使得程序变得更简易健壮。</p><h3 id="设计原则-1"><a href="#设计原则-1" class="headerlink" title="设计原则"></a>设计原则</h3><p>多用组合，少用继承。    </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>策略模式，定义了算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;每天一个设计模式之策略模式&quot;&gt;&lt;a href=&quot;#每天一个设计模式之策略模式&quot; class=&quot;headerlink&quot; title=&quot;每天一个设计模式之策略模式&quot;&gt;&lt;/a&gt;每天一个设计模式之策略模式&lt;/h2&gt;&lt;h3 id=&quot;什么是策略模式-？&quot;&gt;&lt;a href=&quot;#什么是策略模式-？&quot; class=&quot;headerlink&quot; title=&quot;什么是策略模式 ？&quot;&gt;&lt;/a&gt;什么是策略模式 ？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义一系列算法，封装每个算法，并使它们可互换。策略模式使算法独立于使用该算法的客户端而变化。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java 技术" scheme="https://chivalry727.github.io/categories/Java-%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="设计模式" scheme="https://chivalry727.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="策略模式" scheme="https://chivalry727.github.io/tags/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture 异步编程API列表</title>
    <link href="https://chivalry727.github.io/CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8BAPI%E5%88%97%E8%A1%A8/"/>
    <id>https://chivalry727.github.io/CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8BAPI%E5%88%97%E8%A1%A8/</id>
    <published>2020-08-07T08:08:10.000Z</published>
    <updated>2020-08-22T12:50:49.025Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CompletableFuture异步编程API"><a href="#CompletableFuture异步编程API" class="headerlink" title="CompletableFuture异步编程API"></a>CompletableFuture异步编程API</h4><h5 id="静态工厂方法："><a href="#静态工厂方法：" class="headerlink" title="静态工厂方法："></a>静态工厂方法：</h5><ul><li><p>runAsync(Runnable runnable)：使用ForkJoinPool.commonPool()作为它的线程池执行异步代码。</p></li><li><p>runAsync(Runnable runnable, Executor executor)：使用指定的thread pool执行异步代码。</p></li></ul><a id="more"></a><ul><li>supplyAsync(Supplier<U> supplier)：使用ForkJoinPool.commonPool()作为它的线程池执行异步代码，异步操作有返回值。</li></ul><ul><li>supplyAsync(Supplier<U> supplier, Executor executor)：使用指定的thread pool执行异步代码，异步操作有返回值</li></ul><ul><li>complete(T t)：完成异步执行，并返回future的结果</li></ul><ul><li>completeExceptionally(Throwable ex)：异步执行不正常的结束，抛出异步执行的错误堆栈</li></ul><h5 id="转换-类似于流里的map-："><a href="#转换-类似于流里的map-：" class="headerlink" title="转换(类似于流里的map)："></a>转换(类似于流里的map)：</h5><ul><li><p>thenApply(Function&lt;? super T,? extends U&gt; fn)：接受一个Function&lt;? super T,? extends U&gt;参数用来转换CompletableFuture</p></li><li><p>thenApplyAsync(Function&lt;? super T,? extends U&gt; fn)：接受一个Function&lt;? super T,? extends U&gt;参数用来转换CompletableFuture，使用ForkJoinPool</p></li></ul><ul><li>thenApplyAsync(Function&lt;? super T,? extends U&gt; fn, Executor executor)：接受一个Function&lt;? super T,? extends U&gt;参数用来转换CompletableFuture，使用指定的线程池</li></ul><h5 id="flatMap："><a href="#flatMap：" class="headerlink" title="flatMap："></a>flatMap：</h5><ul><li><p>thenCompose(Function&lt;? super T, ? extends CompletionStage<U>&gt; fn)：在异步操作完成的时候对异步操作的结果进行一些操作，并且仍然返回CompletableFuture类型。</p></li><li><p>thenComposeAsync(Function&lt;? super T, ? extends CompletionStage<U>&gt; fn)：在异步操作完成的时候对异步操作的结果进行一些操作，并且仍然返回CompletableFuture类型。使用ForkJoinPool。</p></li></ul><ul><li>thenComposeAsync(Function&lt;? super T, ? extends CompletionStage<U>&gt; fn,Executor executor)：在异步操作完成的时候对异步操作的结果进行一些操作，并且仍然返回CompletableFuture类型。使用指定的线程池。</li></ul><h5 id="组合："><a href="#组合：" class="headerlink" title="组合："></a>组合：</h5><ul><li><p>thenCombine(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)：当两个CompletableFuture都正常完成后，执行提供的fn，用它来组合另外一个CompletableFuture的结果。</p></li><li><p>thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn)：当两个CompletableFuture都正常完成后，执行提供的fn，用它来组合另外一个CompletableFuture的结果。使用ForkJoinPool。<br>thenCombineAsync(CompletionStage&lt;? extends U&gt; other, BiFunction&lt;? super T,? super U,? extends V&gt; fn, Executor executor)：当两个CompletableFuture都正常完成后，执行提供的fn，用它来组合另外一个CompletableFuture的结果。使用指定的线程池。</p></li><li><p>thenAcceptBoth(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)：当两个CompletableFuture都正常完成后，执行提供的action，用它来组合另外一个CompletableFuture的结果。</p></li></ul><ul><li>thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action)：当两个CompletableFuture都正常完成后，执行提供的action，用它来组合另外一个CompletableFuture的结果。使用ForkJoinPool。</li></ul><ul><li>thenAcceptBothAsync(CompletionStage&lt;? extends U&gt; other, BiConsumer&lt;? super T,? super U&gt; action, Executor executor)：当两个CompletableFuture都正常完成后，执行提供的action，用它来组合另外一个CompletableFuture的结果。使用指定的线程池。</li></ul><h5 id="计算结果完成时的处理："><a href="#计算结果完成时的处理：" class="headerlink" title="计算结果完成时的处理："></a>计算结果完成时的处理：</h5><ul><li><p>whenComplete(BiConsumer&lt;? super T,? super Throwable&gt; action)：当CompletableFuture完成计算结果时对结果进行处理，或者当CompletableFuture产生异常的时候对异常进行处理。</p></li><li><p>whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action)：当CompletableFuture完成计算结果时对结果进行处理，或者当CompletableFuture产生异常的时候对异常进行处理。使用ForkJoinPool。</p></li></ul><ul><li>whenCompleteAsync(BiConsumer&lt;? super T,? super Throwable&gt; action, Executor executor)：当CompletableFuture完成计算结果时对结果进行处理，或者当CompletableFuture产生异常的时候对异常进行处理。使用指定的线程池。</li></ul><ul><li>handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)：当CompletableFuture完成计算结果或者抛出异常的时候，执行提供的fn</li></ul><ul><li>handleAsync(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)：当CompletableFuture完成计算结果或者抛出异常的时候，执行提供的fn，使用ForkJoinPool。</li></ul><ul><li>handleAsync(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn, Executor executor)：当CompletableFuture完成计算结果或者抛出异常的时候，执行提供的fn，使用指定的线程池。</li></ul><ul><li>thenAccept(Consumer&lt;? super T&gt; action)：当CompletableFuture完成计算结果，只对结果执行Action，而不返回新的计算值</li></ul><ul><li>thenAcceptAsync(Consumer&lt;? super T&gt; action)：当CompletableFuture完成计算结果，只对结果执行Action，而不返回新的计算值，使用ForkJoinPool。</li></ul><ul><li>thenAcceptAsync(Consumer&lt;? super T&gt; action, Executor executor)：当CompletableFuture完成计算结果，只对结果执行Action，而不返回新的计算值</li></ul><ul><li>acceptEither(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)：当任意一个CompletableFuture完成的时候，action这个消费者就会被执行。</li></ul><ul><li>acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action)：当任意一个CompletableFuture完成的时候，action这个消费者就会被执行。使用ForkJoinPool</li></ul><ul><li>acceptEitherAsync(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? super T&gt; action, Executor executor)：当任意一个CompletableFuture完成的时候，action这个消费者就会被执行。使用指定的线程池</li></ul><ul><li>applyToEither(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)：当任意一个CompletableFuture完成的时候，fn会被执行，它的返回值会当作新的CompletableFuture<U>的计算结果。</li></ul><ul><li>applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn)：当任意一个CompletableFuture完成的时候，fn会被执行，它的返回值会当作新的CompletableFuture<U>的计算结果。使用ForkJoinPool</li></ul><ul><li>applyToEitherAsync(CompletionStage&lt;? extends T&gt; other, Function&lt;? super T,U&gt; fn, Executor executor)：当任意一个CompletableFuture完成的时候，fn会被执行，它的返回值会当作新的CompletableFuture<U>的计算结果。使用指定的线程池</li></ul><ul><li>allOf(CompletableFuture&lt;?&gt;… cfs)：在所有Future对象完成后结束，并返回一个future。</li></ul><ul><li>anyOf(CompletableFuture&lt;?&gt;… cfs)：在任何一个Future对象结束后结束，并返回一个future。</li></ul><h5 id="CompletableFuture异常处理："><a href="#CompletableFuture异常处理：" class="headerlink" title="CompletableFuture异常处理："></a>CompletableFuture异常处理：</h5><ul><li>exceptionally(Function fn)：只有当CompletableFuture抛出异常的时候，才会触发这个exceptionally的计算，调用function计算值。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CompletableFuture异步编程API&quot;&gt;&lt;a href=&quot;#CompletableFuture异步编程API&quot; class=&quot;headerlink&quot; title=&quot;CompletableFuture异步编程API&quot;&gt;&lt;/a&gt;CompletableFuture异步编程API&lt;/h4&gt;&lt;h5 id=&quot;静态工厂方法：&quot;&gt;&lt;a href=&quot;#静态工厂方法：&quot; class=&quot;headerlink&quot; title=&quot;静态工厂方法：&quot;&gt;&lt;/a&gt;静态工厂方法：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;runAsync(Runnable runnable)：使用ForkJoinPool.commonPool()作为它的线程池执行异步代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;runAsync(Runnable runnable, Executor executor)：使用指定的thread pool执行异步代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Java 笔记" scheme="https://chivalry727.github.io/categories/Java-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java8 异步编程" scheme="https://chivalry727.github.io/tags/Java8-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java 虚拟机笔记</title>
    <link href="https://chivalry727.github.io/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/"/>
    <id>https://chivalry727.github.io/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%94%E8%AE%B0/</id>
    <published>2020-08-06T08:53:36.000Z</published>
    <updated>2020-08-20T11:47:57.424Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JVM-虚拟机笔记"><a href="#JVM-虚拟机笔记" class="headerlink" title="JVM 虚拟机笔记"></a>JVM 虚拟机笔记</h3><h4 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h4><p><img src="http://wx2.sinaimg.cn/large/008aQ1h9ly1ghrbvdoy5jj30k70cpgqk.jpg"></p><h5 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h5><ul><li>内存大小：是一块比较小的内存空间</li><li>作用：当前线程所执行的字节码的行号指示器，在Java虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li></ul><a id="more"></a><ul><li><p>功能</p><ul><li>程序控制流的指示器</li><li>分支</li><li>循环</li><li>跳转</li><li>异常处理</li><li>线程恢复</li></ul></li><li><p>内存属性：各个线程之间计数器互不影响，“线程私有”</p></li></ul><h5 id="Java虚拟机栈（Java-Virtual-Machine-Stacks）"><a href="#Java虚拟机栈（Java-Virtual-Machine-Stacks）" class="headerlink" title="Java虚拟机栈（Java Virtual Machine Stacks）"></a>Java虚拟机栈（Java Virtual Machine Stacks）</h5><ul><li><p>描述</p><ul><li>Java方法执行的内存模型，每个方法执行时都会创建栈帧（Stack Frame）</li></ul></li><li><p>栈帧</p><ul><li>存储局部变量表<ul><li>基本数据类型（boolean、byte、char、short、int、float、double、long）</li><li>对象引用（reference类型）</li><li>returnAddress类型（字节码指令地址）</li></ul></li><li>操作数栈</li><li>动态连接</li><li>方法出口</li></ul></li><li><p>内存属性：线程私有，生命周期与线程相同</p></li><li><p>异常</p><ul><li>StackOverflowError<ul><li>线程请求的栈深度大于虚拟机所允许的深度，抛出StackOverflowError异常</li></ul></li><li>OutOfMemoryError<ul><li>如果虚拟机栈容量可扩展，当栈扩展时无法申请到足够内存，抛出OutOfMemoryError异常（Classic虚拟机栈可以动态扩展）</li><li>在HotSpot虚拟机的栈容量是不可动态扩展，所以不会因为动态扩展而OOM，只要线程申请栈空间成功了就不会有OOM，但是申请失败仍然会有OOM异常</li></ul></li></ul></li></ul><h5 id="本地方法栈（Native-Method-Stack）"><a href="#本地方法栈（Native-Method-Stack）" class="headerlink" title="本地方法栈（Native Method Stack）"></a>本地方法栈（Native Method Stack）</h5><ul><li>功能与虚拟机栈非常相似，区别：<ul><li>Java虚拟机栈为虚拟机执行Java方法（字节码）服务</li><li>本地方法栈为虚拟机使用Native方法服务</li></ul></li><li>异常<ul><li>StackOverflowError<ul><li>当栈深度溢出则抛出</li></ul></li><li>OutOfMemoryError<ul><li>当扩展失败时抛出</li></ul></li></ul></li></ul><h5 id="Java堆（Java-Heap）"><a href="#Java堆（Java-Heap）" class="headerlink" title="Java堆（Java Heap）"></a>Java堆（Java Heap）</h5><ul><li><p>描述</p><ul><li>内存大小：Jvm所管理的内存中最大的一块</li><li>被所有线程所共享的区域</li><li>作用：存放对象实例，几乎所有的对象实例都在堆里分配内存，但随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术会发生微妙变化</li><li>堆是垃圾收集器管理的主要区域，因此被称为GC堆</li><li>堆可以处于物理上不连续的内存空间中，只要逻辑上连续即可</li><li>Java堆既可以被实现成固定大小，也可以是可扩展的（通过参数-Xmx和-Xms设定）</li></ul></li><li><p>分类</p><ul><li>内存回收角度<ul><li>现在收集器基本采用分代收集算法<ul><li>以G1收集器为分界，都基于经典分代来设计（不适合当下情况）<ul><li>新生代<ul><li>Eden space</li><li>To Survivor space</li><li>From Survivor space</li></ul></li><li>老年代</li><li>永久代（PermGen）<ul><li>在Jdk8已经删除，替换成元空间（Metaspaces）</li></ul></li></ul></li><li>HotSpot目前采用不分代设计的新垃圾收集器</li></ul></li></ul></li><li>内存分配角度<ul><li>所有线程共享的Java堆中可以划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer， TLAB），以提升分配对象的效率</li></ul></li></ul></li><li><p>异常</p><ul><li>OutOfMemoryError<ul><li>堆没有内存完成实例分配，并且无法扩展时，抛出OOM异常</li></ul></li></ul></li></ul><h5 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h5><ul><li><p>描述</p><ul><li>和Java堆一样，被所有线程所共享，又称Non-Heap（非堆）</li><li>在JDK8以前，又把方法区称为“永久代”，其实两者不等价，只是使用永久代来实现方法区而已，这样HotSpot虚拟机就可以像管理堆一样管理这块内存</li><li>对于其他虚拟机是不存在永久代概念，在JDK7以前，是很容易导致OOM PermGen space内存溢出的问题</li><li>从JDK6开始HotSpot就有放弃永久代，逐步改为采用本地内存（Native Memory）来实现方法区</li><li>从JDK7开始，HotSpot把原来放在永久代的字符串常量池、静态变量等从方法区移出到堆里</li><li>到了JDK8已经完全废弃了，HotSpot把永久代剩余的类型信息全部移到元空间中</li></ul></li><li><p>作用：用来存储</p><ul><li>类信息</li><li>常量</li><li>静态变量</li><li>即时编译器编译后的代码缓存</li></ul></li><li><p>内存回收：</p><ul><li>对常量池对回收</li><li>对类型的卸载</li></ul></li><li><p>异常</p><ul><li>OutOfMemoryError<ul><li>当方法区无法满足内存分配需求时，抛出OOM异常</li></ul></li></ul></li></ul><h6 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h6><ul><li>描述<ul><li>方法区的一部分</li><li>Class文件中除了有类的版本信息、字段、方法、接口等描述信息外，还有一项是常量池表，用于存放编译期生成等各种字面量与符号引用，这部分内容在类加载后存放到方法区的运行时常量池中</li></ul></li><li>作用<ul><li>存储编译期生成的各种字面量</li><li>符号引用</li></ul></li><li>异常<ul><li>OutOfMemoryError<ul><li>当常量池无法申请内存时，抛出OOM异常</li></ul></li></ul></li></ul><h5 id="直接内存（堆外内存）"><a href="#直接内存（堆外内存）" class="headerlink" title="直接内存（堆外内存）"></a>直接内存（堆外内存）</h5><ul><li>并不是虚拟机运行时数据区的一部分，也不是JVM规范中定义的内存区域，是直接受操作系统管理</li><li>在NIO中的DirectByteBuffer对象就是进行堆外内存管理和使用的，它会在对象创建的时候就分配堆外内存。DirectByteBuffer类是在Java Heap外分配内存，对堆外内存的申请主要是通过成员变量Unsafe来操作</li><li>好处：能够在一定程度上减少垃圾回收对应用程序造成的影响</li><li>若忽略直接内存，会使各个内存区域总和大于物理内存限制，从而动态扩展时出现OOM异常</li></ul><h4 id="JVM-对象"><a href="#JVM-对象" class="headerlink" title="JVM 对象"></a>JVM 对象</h4><h5 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h5><p><img src="https://tva1.sinaimg.cn/large/008aQ1h9ly1ghp7gu9418j31fk0b20w3.jpg" alt="WX20200813-151534@2x"></p><ul><li><p>检查指令参数是否在常量池定位到类的符号引用</p></li><li><p>检查符号引用的类是否已加载、解析、初始化</p></li><li><p>为新生对象分配内存</p><ul><li>堆内存规整，则用指针碰撞方式分配</li><li>堆内存不规整，则用空闲列表方式分配</li><li>堆内存规整与否，取决于采用的垃圾收集器是否带有空间压缩整理的能力</li><li>当使用Serial、ParNew等带有压缩整理过程的收集器，系统采用等是指针碰撞方式</li><li>使用CMS这种基于清除（Sweep）算法的收集器时，理论上只能采用较为复杂的空闲列表来实现分配</li><li>内存分配安全方式<ul><li>对分配对内存空间动作进行同步处理<ul><li>CAS+失败重试来保证更新操作对原子性</li></ul></li><li>内存分配对动作按照线程划分在不同对空间之中进行<ul><li>即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（Thread Local Allocation Buffer, TLAP）</li></ul></li></ul></li></ul></li><li><p>将分配到的内存空间都初始化为0（不包括对象头）</p></li><li><p>为对象进行必要设置</p></li><li><p>执行init为对象初始化</p></li></ul><h5 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h5><ul><li><p>对象头（Header）</p><ul><li><p>存储对象自身的运行时数据，也被称为“Mark Word”</p><ul><li>哈希吗（HashCode）</li><li>GC分代年龄</li><li>锁状态标志</li><li>线程持有的锁</li><li>偏向线程ID</li><li>偏向时间戳</li></ul></li><li><p>类型指针</p><ul><li>对象指向它的类元数据的指针</li><li>虚拟机通过指针来确定对象是哪个实例</li></ul></li><li><p>对象若是数组，必须有一块记录数组长度的数据，普通对象JVM可以通过元数据信息获取对象大小，而数组的元数据无法确定大小</p></li></ul></li><li><p>实例数据（Instance Data）</p><ul><li>对象真正存储的有效信息，也是程序定义的各种类型的字段内容</li><li>HotSpot虚拟机分配策略是相同宽度的字段总是被分配在一起</li></ul></li><li><p>对齐填充（Padding）</p><ul><li>不是必要的，起着占位符的作用</li><li>HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍</li><li>当对象实例没有对齐时，就需要通过填充来补全</li></ul></li></ul><h5 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h5><ul><li><p>Java程序通过栈上的reference数据来操作堆上的具体对象，至于通过什么方式定位引用对象，通过以下两种主流方式</p></li><li><p>句柄</p><ul><li>堆分配一块内存作为句柄池，reference中存储对象的句柄地址</li><li>优势：reference存储句柄地址，对象移动时只会改变句柄中实例数据指针，而reference本身不用修改</li></ul></li><li><p>直接指针</p><ul><li>reference存储的直接就是对象地址</li><li>优势：速度更快，节省了一次指针定位的时间开销，由于对象的访问在Java非常频繁，因为节省的开销是非常可观的</li><li>HotSpot 就是使用直接指针方式定位对象</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;JVM-虚拟机笔记&quot;&gt;&lt;a href=&quot;#JVM-虚拟机笔记&quot; class=&quot;headerlink&quot; title=&quot;JVM 虚拟机笔记&quot;&gt;&lt;/a&gt;JVM 虚拟机笔记&lt;/h3&gt;&lt;h4 id=&quot;JVM运行时数据区域&quot;&gt;&lt;a href=&quot;#JVM运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;JVM运行时数据区域&quot;&gt;&lt;/a&gt;JVM运行时数据区域&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://wx2.sinaimg.cn/large/008aQ1h9ly1ghrbvdoy5jj30k70cpgqk.jpg&quot;&gt;&lt;/p&gt;
&lt;h5 id=&quot;程序计数器（Program-Counter-Register）&quot;&gt;&lt;a href=&quot;#程序计数器（Program-Counter-Register）&quot; class=&quot;headerlink&quot; title=&quot;程序计数器（Program Counter Register）&quot;&gt;&lt;/a&gt;程序计数器（Program Counter Register）&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;内存大小：是一块比较小的内存空间&lt;/li&gt;
&lt;li&gt;作用：当前线程所执行的字节码的行号指示器，在Java虚拟机的概念模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JVM 笔记" scheme="https://chivalry727.github.io/categories/JVM-%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="JVM 内存区域" scheme="https://chivalry727.github.io/tags/JVM-%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
    
      <category term="JVM 对象" scheme="https://chivalry727.github.io/tags/JVM-%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
